{
  "info": {
    "name": "ShowPass Backend API - Complete Event Management System",
    "description": "# ShowPass Event Management API - Complete Documentation\n\nThis comprehensive Postman collection covers all aspects of the ShowPass event management system, with detailed examples for both **Free Events** and **Paid Events** workflows.\n\n## 🚀 Quick Start Guide\n\n### Prerequisites\n1. Start your ShowPass backend server on `http://localhost:3000`\n2. Ensure MongoDB is running and connected\n3. Configure your environment variables (email, etc.)\n\n### Collection Structure\n\n#### 1. **Authentication** 🔐\n- User registration (Admin, Organizer, Regular User)\n- Login with different user roles\n- Email verification\n- Password reset workflows\n\n#### 2. **Event Discovery & Management** 🎪\n- Browse all public events with filtering\n- Search events by category, location, and keywords\n- Get free events specifically\n- Detailed event views with complete information\n- Event categories management\n\n#### 3. **Event Creation** ✨\n- **Create Free Events**: Complete examples with proper ticket configuration\n- **Create Paid Events**: Multi-tier pricing with VIP, Regular, Premium options\n- Event approval workflows\n- Event updates and management\n\n#### 4. **Bookings & Ticket Management** 🎫\n- **Free Event Registration**: Instant confirmation with QR codes\n- **Paid Event Booking**: Direct booking after frontend payment processing\n- Ticket management and viewing\n- Booking cancellation\n- QR code generation and verification\n\n#### 5. **Frontend Payment Integration** 💳\n- Payment processing handled entirely on frontend\n- Backend saves successful transactions with frontend payment ID\n- Fee calculation (platform fees, VAT)\n- Immediate ticket generation after payment confirmation\n\n#### 6. **Organizer Workflows** 👨‍💼\n- Organizer dashboard with event statistics\n- Event attendee management\n- Check-in functionality with QR scanning\n- Event performance analytics\n\n#### 7. **Admin Management** 👑\n- Admin dashboard with system overview\n- User management (block/unblock users)\n- Event approval/rejection workflows\n- System-wide analytics and reporting\n\n#### 8. **User Analytics & Management** 👥\n- Comprehensive user details with spending analytics\n- Financial tracking and purchase history\n- User statistics and metrics\n- Admin user management with advanced filtering\n\n#### 9. **Articles & Blog Management** 📝\n- Admin article creation and management\n- Blog post publishing with SEO optimization\n- Article categorization and tagging\n- Social features (likes, comments)\n- Content analytics and management\n\n#### 10. **User Profile Management** 👤\n- Comprehensive user profile retrieval\n- Profile completeness calculation\n- Role-specific statistics and metrics\n- Financial summary and spending analytics\n- Works for both regular users and organizers\n\n#### 11. **Admin Messaging System** 💬\n- Universal messaging to all platform users\n- Targeted messaging to specific user roles\n- Individual personalized messages\n- Professional email templates with branding\n- Delivery tracking and statistics\n\n#### 12. **Refund Management** 💰\n- Refund request submission\n- Admin refund processing\n- Refund status tracking\n- Financial impact management\n\n#### 13. **Complete Workflow Examples** 🔄\n- **Free Event Workflow**: End-to-end process from creation to attendance\n- **Paid Event Workflow**: Complete commercial event lifecycle\n\n## 🎯 Key Features Covered\n\n### Free Events\n- ✅ Zero-cost event creation\n- ✅ Instant registration without payment\n- ✅ QR code generation for entry\n- ✅ Attendee management\n- ✅ Email notifications\n\n### Paid Events\n- ✅ Multi-tier pricing (Regular, VIP, Premium)\n- ✅ Frontend payment processing integration\n- ✅ Automated fee calculation\n- ✅ Direct booking after payment confirmation\n- ✅ Refund management\n- ✅ Revenue tracking\n\n### Admin Features\n- ✅ Event approval system\n- ✅ User management\n- ✅ System analytics\n- ✅ Refund processing\n- ✅ Platform oversight\n\n### Organizer Features\n- ✅ Event creation and management\n- ✅ Attendee check-in\n- ✅ Performance analytics\n- ✅ QR code verification\n\n## 🔧 Environment Variables\n\nThe collection uses these variables (automatically set by requests):\n\n- `baseUrl`: API base URL\n- `authToken`: JWT authentication token\n- `eventId`: General event ID\n- `freeEventId`: Free event specific ID\n- `paidEventId`: Paid event specific ID\n- `bookingId`: Booking reference\n- `frontendPaymentId`: Frontend payment transaction ID\n- `userId`: User identification\n\n## 📋 Testing Scenarios\n\n### Scenario 1: Free Community Event\n1. Organizer creates free tech meetup\n2. Admin approves the event\n3. Users register for free\n4. Organizer manages check-ins\n5. Post-event analytics\n\n### Scenario 2: Premium Business Conference\n1. Organizer creates paid conference with multiple ticket tiers\n2. Admin reviews and approves\n3. Users purchase tickets via frontend payment processor\n4. Backend confirms booking with frontend payment ID\n5. Event day check-in management\n6. Refund processing if needed\n\n## 💡 Best Practices\n\n1. **Always authenticate first** - Use login endpoints before testing other features\n2. **Test with different user roles** - Admin, Organizer, and Regular User perspectives\n3. **Follow the workflow examples** - Use the complete workflow folders for end-to-end testing\n4. **Check response logs** - All requests include detailed console logging for debugging\n5. **Environment variables** - Let the collection manage IDs automatically\n\n## 🐛 Troubleshooting\n\n- **Authentication errors**: Ensure you're logged in with the correct role\n- **Event not found**: Check that event IDs are properly set in environment variables\n- **Payment issues**: Ensure frontend payment is completed before creating booking\n- **Permission denied**: Make sure you're using the appropriate user role for each endpoint\n\n## 📞 Support\n\nThis collection provides comprehensive coverage of the ShowPass API. Each request includes detailed test scripts that log important information to help with debugging and understanding the system behavior.\n\n---\n\n**Version**: 3.0.0  \n**Last Updated**: August 2025  \n**Coverage**: Complete Free & Paid Event Workflows with Frontend Payment Integration",
    "version": "3.0.0",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{authToken}}",
        "type": "string"
      }
    ]
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:3000/api",
      "type": "string"
    },
    {
      "key": "authToken",
      "value": "",
      "type": "string",
      "description": "JWT authentication token - automatically set by login requests"
    },
    {
      "key": "eventId",
      "value": "",
      "type": "string",
      "description": "General event ID for testing - set by event creation requests"
    },
    {
      "key": "freeEventId",
      "value": "",
      "type": "string",
      "description": "Free event ID - set by free event creation request"
    },
    {
      "key": "paidEventId",
      "value": "",
      "type": "string",
      "description": "Paid event ID - set by paid event creation request"
    },
    {
      "key": "userId",
      "value": "",
      "type": "string",
      "description": "User ID - automatically set by login requests"
    },
    {
      "key": "bookingId",
      "value": "",
      "type": "string",
      "description": "General booking ID for testing"
    },
    {
      "key": "freeBookingId",
      "value": "",
      "type": "string",
      "description": "Free event booking ID"
    },
    {
      "key": "paidBookingId",
      "value": "",
      "type": "string",
      "description": "Paid event booking ID"
    },
    {
      "key": "vipBookingId",
      "value": "",
      "type": "string",
      "description": "VIP ticket booking ID"
    },
    {
      "key": "paymentReference",
      "value": "",
      "type": "string",
      "description": "Payment reference for tracking - can be frontend payment ID"
    },
    {
      "key": "frontendPaymentId",
      "value": "",
      "type": "string",
      "description": "Frontend payment processor transaction ID"
    },
    {
      "key": "refundId",
      "value": "",
      "type": "string",
      "description": "Refund request ID"
    },
    {
      "key": "articleId",
      "value": "",
      "type": "string",
      "description": "Article ID for blog/article management - set by article creation requests"
    },
    {
      "key": "commentId",
      "value": "",
      "type": "string",
      "description": "Comment ID for reply functionality - set by comment creation requests"
    }
  ],
  "item": [
    {
      "name": "Authentication",
      "item": [
        {
          "name": "Register Admin",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"firstName\": \"Admin\",\n  \"lastName\": \"User\",\n  \"email\": \"admin@showpass.com\",\n  \"password\": \"Admin123!\",\n  \"role\": \"admin\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "register"]
            }
          }
        },
        {
          "name": "Register Organizer",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"firstName\": \"Event\",\n  \"lastName\": \"Organizer\",\n  \"email\": \"organizer@showpass.com\",\n  \"password\": \"Organizer123!\",\n  \"role\": \"organizer\",\n  \"phone\": \"+2348123456789\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "register"]
            }
          }
        },
        {
          "name": "Register Regular User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.environment.set('authToken', response.data.token);",
                  "    pm.environment.set('userId', response.data.user._id);",
                  "    console.log('✅ User registration successful');",
                  "    console.log('👤 User Details:');",
                  "    console.log('- ID:', response.data.user._id);",
                  "    console.log('- Name:', response.data.user.firstName + ' ' + response.data.user.lastName);",
                  "    console.log('- Email:', response.data.user.email);",
                  "    console.log('- Role:', response.data.user.role);",
                  "    console.log('- Verified:', response.data.user.isVerified);",
                  "    console.log('- Token saved to environment');",
                  "    console.log('');",
                  "    console.log('📧 Next Step: Check email for verification link');",
                  "    if (!response.data.user.isVerified) {",
                  "        console.log('💡 You can also use the \"Resend Verification Email\" endpoint');",
                  "    }",
                  "} else {",
                  "    console.log('❌ Registration failed');",
                  "    console.log('Response:', pm.response.text());",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"firstName\": \"Regular\",\n  \"lastName\": \"User\",\n  \"email\": \"user@showpass.com\",\n  \"password\": \"User123!\",\n  \"role\": \"user\",\n  \"phone\": \"+2348087654321\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "register"]
            },
            "description": "Register a new regular user account. This will create a user with 'user' role who can browse events, make bookings, and manage their profile."
          }
        },
        {
          "name": "Register Test User (Mustapha)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.environment.set('authToken', response.data.token);",
                  "    pm.environment.set('userId', response.data.user._id);",
                  "    console.log('✅ Test user registration successful');",
                  "    console.log('👤 User Details:');",
                  "    console.log('- ID:', response.data.user._id);",
                  "    console.log('- Name:', response.data.user.firstName + ' ' + response.data.user.lastName);",
                  "    console.log('- Email:', response.data.user.email);",
                  "    console.log('- Role:', response.data.user.role);",
                  "    console.log('- Verified:', response.data.user.isVerified);",
                  "    console.log('- Token saved to environment');",
                  "    console.log('');",
                  "    console.log('🧪 This is a test user for verification workflows');",
                  "    if (!response.data.user.isVerified) {",
                  "        console.log('📧 Next: Use \"Resend Verification Email\" to test email verification');",
                  "    }",
                  "} else if (pm.response.code === 400) {",
                  "    const response = pm.response.json();",
                  "    if (response.message.includes('already exists')) {",
                  "        console.log('ℹ️ User already exists - try logging in instead');",
                  "    } else {",
                  "        console.log('❌ Registration failed:', response.message);",
                  "    }",
                  "} else {",
                  "    console.log('❌ Registration failed');",
                  "    console.log('Response:', pm.response.text());",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"firstName\": \"Mustapha\",\n  \"lastName\": \"Hajarat\",\n  \"email\": \"mustapha.hajarat@bowen.edu.ng\",\n  \"password\": \"Baikiss12\",\n  \"role\": \"user\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "register"]
            },
            "description": "Register the test user with Bowen University email. This user can be used to test the email verification workflow and other user features."
          }
        },
        {
          "name": "Login Admin (Seeded)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.environment.set('authToken', response.data.token);",
                  "    pm.environment.set('userId', response.data.user._id);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"mustapha.muhammed@bowen.edu.ng\",\n  \"password\": \"Balikiss12\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "login"]
            }
          }
        },
        {
          "name": "Login Organizer (Seeded)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.environment.set('authToken', response.data.token);",
                  "    pm.environment.set('userId', response.data.user._id);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"louisdiaz43@gmail.com\",\n  \"password\": \"Balikiss12\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "login"]
            }
          }
        },
        {
          "name": "Login User (Seeded)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.environment.set('authToken', response.data.token);",
                  "    pm.environment.set('userId', response.data.user._id);",
                  "    console.log('✅ Seeded user login successful');",
                  "    console.log('👤 User Details:');",
                  "    console.log('- ID:', response.data.user._id);",
                  "    console.log('- Name:', response.data.user.firstName + ' ' + response.data.user.lastName);",
                  "    console.log('- Email:', response.data.user.email);",
                  "    console.log('- Role:', response.data.user.role);",
                  "    console.log('- Verified:', response.data.user.isVerified);",
                  "    console.log('- Token saved to environment');",
                  "    console.log('');",
                  "    console.log('🌱 This is a seeded user from database initialization');",
                  "    console.log('✅ Account verified - all features available');",
                  "} else if (pm.response.code === 401) {",
                  "    console.log('❌ Login failed - Invalid credentials');",
                  "    console.log('💡 Make sure you have run the seed data script first');",
                  "} else if (pm.response.code === 403) {",
                  "    const response = pm.response.json();",
                  "    if (response.message && response.message.includes('verify your email')) {",
                  "        console.log('🚫 Email verification required');",
                  "        console.log('📧 Please verify your email address before logging in');",
                  "        console.log('');",
                  "        console.log('💡 This seeded user needs email verification:');",
                  "        console.log('1. Use \"Resend Verification Email\" endpoint');",
                  "        console.log('2. Check your email for verification link');",
                  "        console.log('3. Click verification link');",
                  "        console.log('4. Then try logging in again');",
                  "    } else {",
                  "        console.log('❌ Access forbidden:', response.message);",
                  "    }",
                  "} else {",
                  "    console.log('❌ Login failed');",
                  "    console.log('Response:', pm.response.text());",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"muhammedabiodun42@gmail.com\",\n  \"password\": \"Balikiss12\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "login"]
            },
            "description": "Login with the seeded user account. This user is created when the database is initialized with seed data.\n\n⚠️ **Email Verification Required**: Users must verify their email address before they can log in. If the account is not verified, you'll receive a 403 error with instructions to verify.\n\n**Expected Responses:**\n- 200: Login successful (verified user)\n- 401: Invalid credentials\n- 403: Email verification required"
          }
        },
        {
          "name": "Login Test User (Mustapha)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.environment.set('authToken', response.data.token);",
                  "    pm.environment.set('userId', response.data.user._id);",
                  "    console.log('✅ Test user login successful');",
                  "    console.log('👤 User Details:');",
                  "    console.log('- ID:', response.data.user._id);",
                  "    console.log('- Name:', response.data.user.firstName + ' ' + response.data.user.lastName);",
                  "    console.log('- Email:', response.data.user.email);",
                  "    console.log('- Role:', response.data.user.role);",
                  "    console.log('- Verified:', response.data.user.isVerified);",
                  "    console.log('- Token saved to environment');",
                  "    console.log('');",
                  "    console.log('🧪 Using test user for verification workflows');",
                  "    console.log('✅ Account verified - ready for testing');",
                  "} else if (pm.response.code === 401) {",
                  "    console.log('❌ Login failed - Check credentials');",
                  "    console.log('💡 Try registering the user first if account doesn\\'t exist');",
                  "} else if (pm.response.code === 403) {",
                  "    const response = pm.response.json();",
                  "    if (response.message && response.message.includes('verify your email')) {",
                  "        console.log('� Email verification required');",
                  "        console.log('📧 Please verify your email address before logging in');",
                  "        console.log('');",
                  "        console.log('💡 Perfect for testing email verification workflow:');",
                  "        console.log('1. Use \"Resend Verification Email\" endpoint');",
                  "        console.log('2. Check email for verification link');",
                  "        console.log('3. Use \"Verify Email\" endpoint with token');",
                  "        console.log('4. Then try logging in again');",
                  "        console.log('');",
                  "        console.log('🧪 This demonstrates the security feature working correctly');",
                  "    } else {",
                  "        console.log('❌ Access forbidden:', response.message);",
                  "    }",
                  "} else {",
                  "    console.log('❌ Login failed');",
                  "    console.log('Response:', pm.response.text());",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"mustapha.hajarat@bowen.edu.ng\",\n  \"password\": \"Baikiss12\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "login"]
            },
            "description": "Login with the test user credentials. This user can be used to test various features including email verification workflows.\n\n⚠️ **Email Verification Required**: Users must verify their email address before they can log in. This endpoint is perfect for testing the email verification workflow:\n\n1. Try logging in with unverified user → Get 403 error\n2. Use \"Resend Verification Email\" endpoint\n3. Use \"Verify Email\" endpoint with token\n4. Try logging in again → Success\n\n**Expected Responses:**\n- 200: Login successful (verified user)\n- 401: Invalid credentials\n- 403: Email verification required"
          }
        },
        {
          "name": "Verify Email",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    console.log('✅ Email verification successful');",
                  "    console.log('🎉 Welcome to ShowPass! Account is now verified');",
                  "    console.log('📧 Welcome email sent to your inbox');",
                  "    console.log('');",
                  "    console.log('💡 You can now:');",
                  "    console.log('- Login to access all features');",
                  "    console.log('- Browse and book events');",
                  "    console.log('- Create events (if organizer)');",
                  "    console.log('- Receive digital tickets with QR codes');",
                  "    console.log('');",
                  "    console.log('🔗 Next: Use the Login endpoint to get your authentication token');",
                  "} else if (pm.response.code === 400) {",
                  "    const response = pm.response.json();",
                  "    if (response.message.includes('Invalid') || response.message.includes('expired')) {",
                  "        console.log('❌ Invalid or expired verification code');",
                  "        console.log('💡 The 6-digit code may have expired (15 min limit)');",
                  "        console.log('🔄 Try using \"Resend Verification Email\" to get a new code');",
                  "    } else if (response.message.includes('6 digits')) {",
                  "        console.log('❌ Invalid code format - must be exactly 6 digits');",
                  "        console.log('💡 Example: 123456');",
                  "    } else if (response.message.includes('already verified')) {",
                  "        console.log('ℹ️ Email already verified');",
                  "        console.log('✅ Account is ready to use');",
                  "    } else {",
                  "        console.log('❌ Verification failed:', response.message);",
                  "    }",
                  "} else {",
                  "    console.log('❌ Verification failed');",
                  "    console.log('Response:', pm.response.text());",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"code\": \"123456\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/verify-email",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "verify-email"]
            },
            "description": "Verify user email using the 6-digit code sent via email. Replace '123456' with the actual verification code from your email.\n\n⚠️ **Important**: \n- Code expires in 15 minutes\n- Must be exactly 6 digits\n- Check your email (including spam folder)\n\n**Expected Responses:**\n- 200: Email verified successfully, welcome email sent\n- 400: Invalid code format, expired code, or already verified\n- 500: Server error"
          }
        },
        {
          "name": "Resend Verification Email",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    console.log('✅ Verification code resent successfully');",
                  "    console.log('📧 Please check your email for the new 6-digit code');",
                  "    console.log('');",
                  "    console.log('💡 Next Steps:');",
                  "    console.log('1. Check your email inbox (including spam folder)');",
                  "    console.log('2. Copy the 6-digit verification code');",
                  "    console.log('3. Use \"Verify Email\" endpoint with the code');",
                  "    console.log('4. Code expires in 15 minutes');",
                  "} else if (pm.response.code === 400) {",
                  "    const response = pm.response.json();",
                  "    if (response.message.includes('already verified')) {",
                  "        console.log('ℹ️ Email is already verified - no action needed');",
                  "    } else {",
                  "        console.log('❌ Resend verification failed:', response.message);",
                  "    }",
                  "} else {",
                  "    console.log('❌ Failed to resend verification email');",
                  "    console.log('Response:', pm.response.text());",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{authToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/auth/resend-verification",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "resend-verification"]
            },
            "description": "Resend verification code to the authenticated user. Requires authentication token from login. Can only be used if the email is not already verified.\n\n🔐 **Authentication Required**: Must be logged in\n📧 **New Code**: Generates fresh 6-digit verification code\n⏰ **Expires**: Code valid for 15 minutes"
          }
        },
        {
          "name": "Resend Verification Email (Public)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    console.log('✅ Verification code sent successfully');",
                  "    console.log('📧 Please check your email for the new 6-digit code');",
                  "    console.log('');",
                  "    console.log('💡 Next Steps:');",
                  "    console.log('1. Check your email inbox (including spam folder)');",
                  "    console.log('2. Copy the 6-digit verification code');",
                  "    console.log('3. Use \"Verify Email\" endpoint with the code');",
                  "    console.log('4. Code expires in 15 minutes');",
                  "    console.log('');",
                  "    console.log('🧪 This endpoint doesn\\'t require authentication');",
                  "} else if (pm.response.code === 400) {",
                  "    const response = pm.response.json();",
                  "    if (response.message.includes('already verified')) {",
                  "        console.log('ℹ️ Email is already verified - login directly');",
                  "        console.log('✅ No verification needed');",
                  "    } else {",
                  "        console.log('❌ Resend verification failed:', response.message);",
                  "    }",
                  "} else if (pm.response.code === 404) {",
                  "    console.log('❌ No user found with this email address');",
                  "    console.log('💡 Check the email spelling or register first');",
                  "} else {",
                  "    console.log('❌ Failed to resend verification email');",
                  "    console.log('Response:', pm.response.text());",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"mustapha.hajarat@bowen.edu.ng\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/resend-verification-email",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "resend-verification-email"]
            },
            "description": "Resend verification code to any email address without requiring authentication. Perfect for users who haven't verified their email yet and can't login.\n\n🔑 **Key Features:**\n- No authentication required\n- Generates new 6-digit code\n- Code expires in 15 minutes\n- Works for unverified accounts\n\n**Expected Responses:**\n- 200: Verification code sent successfully\n- 400: Email already verified or invalid request\n- 404: No user found with email address\n- 500: Server error"
          }
        },
        {
          "name": "Forgot Password",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    console.log('✅ Password reset email sent successfully');",
                  "    console.log('📧 Please check your email for the reset link');",
                  "    console.log('');",
                  "    console.log('💡 Next Steps:');",
                  "    console.log('1. Check your email inbox (including spam folder)');",
                  "    console.log('2. Click the reset link in the email');",
                  "    console.log('3. Or copy the reset token and use \"Reset Password\" endpoint');",
                  "    console.log('');",
                  "    console.log('⏰ Note: Reset tokens typically expire after 1 hour');",
                  "} else if (pm.response.code === 404) {",
                  "    console.log('❌ Email not found');",
                  "    console.log('💡 Make sure the email address is correct and registered');",
                  "} else {",
                  "    console.log('❌ Password reset request failed');",
                  "    console.log('Response:', pm.response.text());",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"mustapha.hajarat@bowen.edu.ng\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/forgot-password",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "forgot-password"]
            },
            "description": "Request a password reset email. The user will receive an email with a reset token that can be used to set a new password."
          }
        },
        {
          "name": "Reset Password",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    console.log('✅ Password reset successful');",
                  "    console.log('🔐 Your password has been updated');",
                  "    console.log('');",
                  "    console.log('💡 Next Steps:');",
                  "    console.log('1. Use your new password to login');",
                  "    console.log('2. Consider updating your password in any saved credentials');",
                  "    console.log('');",
                  "    console.log('🔗 You can now use the login endpoints with your new password');",
                  "} else if (pm.response.code === 400) {",
                  "    const response = pm.response.json();",
                  "    if (response.message.includes('Invalid') || response.message.includes('expired')) {",
                  "        console.log('❌ Invalid or expired reset token');",
                  "        console.log('💡 Request a new password reset from \"Forgot Password\"');",
                  "    } else if (response.message.includes('Password')) {",
                  "        console.log('❌ Password validation failed');",
                  "        console.log('💡 Password must meet security requirements:');",
                  "        console.log('- At least 8 characters long');",
                  "        console.log('- Include uppercase and lowercase letters');",
                  "        console.log('- Include at least one number');",
                  "        console.log('- Include at least one special character');",
                  "    } else {",
                  "        console.log('❌ Password reset failed:', response.message);",
                  "    }",
                  "} else {",
                  "    console.log('❌ Password reset failed');",
                  "    console.log('Response:', pm.response.text());",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"token\": \"RESET_TOKEN_FROM_EMAIL\",\n  \"newPassword\": \"NewPassword123!\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/reset-password",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "reset-password"]
            },
            "description": "Reset password using the token received via email. Replace RESET_TOKEN_FROM_EMAIL with the actual token from the password reset email."
          }
        }
      ]
    },
    {
      "name": "Event Discovery & Management",
      "item": [
        {
          "name": "Get All Public Events (With Filters)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    console.log('✅ Public events retrieved successfully');",
                  "    console.log('📊 Event Discovery Results:');",
                  "    console.log('- Total Events Found:', response.data.length);",
                  "    console.log('- Current Page:', response.meta?.pagination?.page || 1);",
                  "    console.log('- Total Pages:', response.meta?.pagination?.pages || 1);",
                  "    console.log('- Total Events in Database:', response.meta?.pagination?.total || 0);",
                  "    ",
                  "    let freeEvents = 0;",
                  "    let paidEvents = 0;",
                  "    ",
                  "    response.data.forEach((event, index) => {",
                  "        console.log(`\\n🎪 Event ${index + 1}:`);",
                  "        console.log('- Title:', event.title);",
                  "        console.log('- Category:', event.category);",
                  "        console.log('- Location:', event.venue.city + ', ' + event.venue.state);",
                  "        console.log('- Date:', new Date(event.startDate).toLocaleDateString());",
                  "        console.log('- Time:', event.startTime + ' - ' + event.endTime);",
                  "        console.log('- Is Free:', event.isFreeEvent);",
                  "        console.log('- Status:', event.status);",
                  "        console.log('- Featured:', !!event.featured);",
                  "        console.log('- Current Attendees:', event.currentAttendees || 0);",
                  "        ",
                  "        if (event.isFreeEvent) freeEvents++;",
                  "        else paidEvents++;",
                  "    });",
                  "    ",
                  "    console.log(`\\n📈 Event Type Summary:`);",
                  "    console.log('- Free Events:', freeEvents);",
                  "    console.log('- Paid Events:', paidEvents);",
                  "} else {",
                  "    console.log('❌ Failed to retrieve events');",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}/events?page=1&limit=10&sortBy=startDate&sortOrder=asc",
              "host": ["{{baseUrl}}"],
              "path": ["events"],
              "query": [
                {
                  "key": "page",
                  "value": "1",
                  "description": "Page number for pagination"
                },
                {
                  "key": "limit",
                  "value": "10",
                  "description": "Number of events per page"
                },
                {
                  "key": "sortBy",
                  "value": "startDate",
                  "description": "Sort field: startDate, title, category"
                },
                {
                  "key": "sortOrder",
                  "value": "asc",
                  "description": "Sort order: asc or desc"
                },
                {
                  "key": "category",
                  "value": "",
                  "description": "Filter by category",
                  "disabled": true
                },
                {
                  "key": "city",
                  "value": "",
                  "description": "Filter by city",
                  "disabled": true
                },
                {
                  "key": "state",
                  "value": "",
                  "description": "Filter by state",
                  "disabled": true
                },
                {
                  "key": "search",
                  "value": "",
                  "description": "Search in title, description, and tags",
                  "disabled": true
                },
                {
                  "key": "featured",
                  "value": "",
                  "description": "Filter featured events (true/false)",
                  "disabled": true
                }
              ]
            }
          }
        },
        {
          "name": "Get All Free Events",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    console.log('✅ Free events retrieved successfully');",
                  "    console.log('🆓 Free Events Summary:');",
                  "    console.log('- Total Free Events:', response.data.length);",
                  "    ",
                  "    response.data.forEach((event, index) => {",
                  "        console.log(`\\n🎪 Free Event ${index + 1}:`);",
                  "        console.log('- Title:', event.title);",
                  "        console.log('- Category:', event.category);",
                  "        console.log('- Location:', event.venue.city);",
                  "        console.log('- Date:', new Date(event.startDate).toLocaleDateString());",
                  "        console.log('- Is Free Event:', event.isFreeEvent);",
                  "        console.log('- Available Seats:', (event.maxAttendees || 0) - (event.currentAttendees || 0));",
                  "    });",
                  "    ",
                  "    console.log('\\n💡 All events returned should be free (isFreeEvent: true)');",
                  "} else {",
                  "    console.log('❌ Failed to retrieve free events');",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}/events/free?page=1&limit=10",
              "host": ["{{baseUrl}}"],
              "path": ["events", "free"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "10"
                },
                {
                  "key": "category",
                  "value": "",
                  "description": "Filter by category",
                  "disabled": true
                },
                {
                  "key": "city",
                  "value": "",
                  "description": "Filter by city",
                  "disabled": true
                },
                {
                  "key": "search",
                  "value": "",
                  "description": "Search term",
                  "disabled": true
                }
              ]
            }
          }
        },
        {
          "name": "Search Events by Technology Category",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    console.log('✅ Technology events search completed');",
                  "    console.log('🔍 Search Results:');",
                  "    console.log('- Events Found:', response.data.length);",
                  "    ",
                  "    response.data.forEach((event, index) => {",
                  "        console.log(`\\n💻 Tech Event ${index + 1}:`);",
                  "        console.log('- Title:', event.title);",
                  "        console.log('- Category:', event.category);",
                  "        console.log('- Location:', event.venue.city);",
                  "        console.log('- Type:', event.isFreeEvent ? 'Free' : 'Paid');",
                  "        console.log('- Tags:', event.tags?.join(', ') || 'None');",
                  "    });",
                  "    ",
                  "    console.log('\\n🎯 All events should be in Technology category');",
                  "} else {",
                  "    console.log('❌ Technology events search failed');",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}/events?category=Technology&search=tech&location=Lagos",
              "host": ["{{baseUrl}}"],
              "path": ["events"],
              "query": [
                {
                  "key": "category",
                  "value": "Technology"
                },
                {
                  "key": "search",
                  "value": "tech"
                },
                {
                  "key": "location",
                  "value": "Lagos"
                }
              ]
            }
          }
        },
        {
          "name": "Get Event Categories",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    console.log('✅ Event categories retrieved successfully');",
                  "    console.log('📂 Available Categories:');",
                  "    response.data.forEach((category, index) => {",
                  "        console.log(`${index + 1}. ${category}`);",
                  "    });",
                  "    console.log('\\n💡 Use these categories when creating or filtering events');",
                  "} else {",
                  "    console.log('❌ Failed to retrieve categories');",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}/events/categories",
              "host": ["{{baseUrl}}"],
              "path": ["events", "categories"]
            }
          }
        },
        {
          "name": "Get Event by ID (Detailed View)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    const event = response.data;",
                  "    console.log('✅ Event details retrieved successfully');",
                  "    console.log('\\n📋 Complete Event Information:');",
                  "    console.log('- Event ID:', event._id);",
                  "    console.log('- Title:', event.title);",
                  "    console.log('- Description Length:', event.description?.length + ' characters');",
                  "    console.log('- Category:', event.category);",
                  "    console.log('- Organizer:', event.organizer?.firstName + ' ' + event.organizer?.lastName);",
                  "    console.log('- Organizer Email:', event.organizer?.email);",
                  "    ",
                  "    console.log('\\n📍 Venue Information:');",
                  "    console.log('- Name:', event.venue?.name);",
                  "    console.log('- Address:', event.venue?.address);",
                  "    console.log('- City:', event.venue?.city);",
                  "    console.log('- State:', event.venue?.state);",
                  "    ",
                  "    console.log('\\n📅 Date & Time:');",
                  "    console.log('- Start Date:', new Date(event.startDate).toLocaleDateString());",
                  "    console.log('- End Date:', new Date(event.endDate).toLocaleDateString());",
                  "    console.log('- Start Time:', event.startTime);",
                  "    console.log('- End Time:', event.endTime);",
                  "    ",
                  "    console.log('\\n🎟️ Ticket Information:');",
                  "    console.log('- Is Free Event:', event.isFreeEvent);",
                  "    console.log('- Ticket Types:', event.ticketTypes?.length || 0);",
                  "    event.ticketTypes?.forEach((ticket, index) => {",
                  "        console.log(`  ${index + 1}. ${ticket.name}: ₦${ticket.price} (${ticket.sold}/${ticket.quantity} sold)`);",
                  "    });",
                  "    ",
                  "    console.log('\\n📊 Event Status:');",
                  "    console.log('- Status:', event.status);",
                  "    console.log('- Approved:', event.approved);",
                  "    console.log('- Featured:', !!event.featured);",
                  "    console.log('- Public:', event.isPublic);",
                  "    console.log('- Current Attendees:', event.currentAttendees || 0);",
                  "    console.log('- Max Attendees:', event.maxAttendees || 'Unlimited');",
                  "    ",
                  "    if (event.tags?.length > 0) {",
                  "        console.log('\\n🏷️ Tags:', event.tags.join(', '));",
                  "    }",
                  "} else {",
                  "    console.log('❌ Failed to retrieve event details');",
                  "    console.log('Response:', pm.response.text());",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}/events/{{eventId}}",
              "host": ["{{baseUrl}}"],
              "path": ["events", "{{eventId}}"]
            }
          }
        },
        {
          "name": "Create Paid Event (Organizer) - Complete Example",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.environment.set('eventId', response.data._id);",
                  "    pm.environment.set('paidEventId', response.data._id);",
                  "    console.log('✅ Paid event created successfully with ID:', response.data._id);",
                  "    ",
                  "    // Log event details for verification",
                  "    console.log('📋 Event Details:');",
                  "    console.log('- Title:', response.data.title);",
                  "    console.log('- Category:', response.data.category);",
                  "    console.log('- Venue:', response.data.venue.name);",
                  "    console.log('- Start Date:', response.data.startDate);",
                  "    console.log('- Is Free Event:', response.data.isFreeEvent);",
                  "    console.log('- Status:', response.data.status);",
                  "    console.log('- Approved:', response.data.approved);",
                  "    ",
                  "    // Log ticket types",
                  "    console.log('🎟️ Ticket Types:');",
                  "    response.data.ticketTypes.forEach((ticket, index) => {",
                  "        console.log(`${index + 1}. ${ticket.name}: ₦${ticket.price} (${ticket.quantity} available)`);",
                  "    });",
                  "} else {",
                  "    console.log('❌ Failed to create paid event');",
                  "    console.log('Response:', pm.response.text());",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{authToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Lagos Tech Conference 2025 - Paid Event\",\n  \"description\": \"Join us for the biggest technology conference in Lagos! This premium event features world-class speakers, networking opportunities, hands-on workshops, and exclusive tech demos. Perfect for developers, entrepreneurs, and tech enthusiasts looking to advance their careers and connect with industry leaders. Includes breakfast, lunch, and evening networking cocktail.\",\n  \"category\": \"Technology\",\n  \"venue\": {\n    \"name\": \"Eko Convention Centre\",\n    \"address\": \"Eko Hotel & Suites, Plot 1415, Adetokunbo Ademola Street\",\n    \"city\": \"Lagos\",\n    \"state\": \"Lagos\",\n    \"coordinates\": {\n      \"latitude\": 6.4474,\n      \"longitude\": 3.4553\n    }\n  },\n  \"startDate\": \"2025-03-15T08:00:00.000Z\",\n  \"endDate\": \"2025-03-15T18:00:00.000Z\",\n  \"startTime\": \"08:00\",\n  \"endTime\": \"18:00\",\n  \"ticketTypes\": [\n    {\n      \"name\": \"Early Bird\",\n      \"price\": 25000,\n      \"quantity\": 50,\n      \"description\": \"Limited time early bird pricing - includes all conference sessions, meals, and networking\",\n      \"benefits\": [\"Priority seating\", \"Welcome breakfast\", \"Lunch included\", \"Networking cocktail\", \"Conference swag bag\"],\n      \"isFree\": false\n    },\n    {\n      \"name\": \"Regular\",\n      \"price\": 35000,\n      \"quantity\": 200,\n      \"description\": \"Standard conference admission with full access to all sessions and meals\",\n      \"benefits\": [\"All conference sessions\", \"Lunch included\", \"Networking opportunities\", \"Digital resources\"],\n      \"isFree\": false\n    },\n    {\n      \"name\": \"VIP\",\n      \"price\": 75000,\n      \"quantity\": 30,\n      \"description\": \"Premium experience with exclusive access to speaker meet & greet and VIP lounge\",\n      \"benefits\": [\"Front row seating\", \"Speaker meet & greet\", \"VIP lounge access\", \"Premium meals\", \"Exclusive networking\", \"Premium swag bag\", \"1-on-1 mentor session\"],\n      \"isFree\": false\n    },\n    {\n      \"name\": \"Premium\",\n      \"price\": 120000,\n      \"quantity\": 10,\n      \"description\": \"Ultimate conference experience with backstage access and private dinner\",\n      \"benefits\": [\"Backstage access\", \"Private dinner with speakers\", \"All VIP benefits\", \"Personal concierge\", \"Professional photos\", \"Lifetime alumni network access\"],\n      \"isFree\": false\n    }\n  ],\n  \"images\": [\n    \"https://example.com/tech-conference-banner.jpg\",\n    \"https://example.com/venue-photo.jpg\"\n  ],\n  \"tags\": [\"technology\", \"conference\", \"networking\", \"innovation\", \"startup\", \"AI\", \"blockchain\", \"fintech\"],\n  \"maxAttendees\": 290,\n  \"isPublic\": true\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/events",
              "host": ["{{baseUrl}}"],
              "path": ["events"]
            }
          }
        },
        {
          "name": "Create Free Event (Organizer) - Complete Example",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.environment.set('freeEventId', response.data._id);",
                  "    console.log('✅ Free event created successfully with ID:', response.data._id);",
                  "    ",
                  "    // Log event details for verification",
                  "    console.log('📋 Event Details:');",
                  "    console.log('- Title:', response.data.title);",
                  "    console.log('- Category:', response.data.category);",
                  "    console.log('- Venue:', response.data.venue.name);",
                  "    console.log('- Start Date:', response.data.startDate);",
                  "    console.log('- Is Free Event:', response.data.isFreeEvent);",
                  "    console.log('- Status:', response.data.status);",
                  "    console.log('- Approved:', response.data.approved);",
                  "    ",
                  "    // Log ticket types",
                  "    console.log('🆓 Free Ticket Types:');",
                  "    response.data.ticketTypes.forEach((ticket, index) => {",
                  "        console.log(`${index + 1}. ${ticket.name}: ₦${ticket.price} (${ticket.quantity} available) - Free: ${ticket.isFree}`);",
                  "    });",
                  "} else {",
                  "    console.log('❌ Failed to create free event');",
                  "    console.log('Response:', pm.response.text());",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{authToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Lagos Open Source Meetup - Free Community Event\",\n  \"description\": \"Join our vibrant open source community for an evening of learning, sharing, and networking! This free event is perfect for developers of all levels who are passionate about open source technologies. We'll have lightning talks, live coding sessions, and plenty of opportunities to connect with fellow developers. Refreshments and networking opportunities provided.\",\n  \"category\": \"Technology\",\n  \"venue\": {\n    \"name\": \"Co-Creation Hub (CcHUB)\",\n    \"address\": \"294 Herbert Macaulay Way, Sabo\",\n    \"city\": \"Lagos\",\n    \"state\": \"Lagos\",\n    \"coordinates\": {\n      \"latitude\": 6.5568,\n      \"longitude\": 3.3515\n    }\n  },\n  \"startDate\": \"2025-02-20T17:00:00.000Z\",\n  \"endDate\": \"2025-02-20T21:00:00.000Z\",\n  \"startTime\": \"17:00\",\n  \"endTime\": \"21:00\",\n  \"ticketTypes\": [\n    {\n      \"name\": \"Free\",\n      \"price\": 0,\n      \"quantity\": 100,\n      \"description\": \"Free admission to all sessions and networking\",\n      \"benefits\": [\"All sessions access\", \"Networking opportunities\", \"Light refreshments\", \"Open source swag\"],\n      \"isFree\": true\n    },\n    {\n      \"name\": \"Regular\",\n      \"price\": 0,\n      \"quantity\": 50,\n      \"description\": \"Standard free admission with reserved seating\",\n      \"benefits\": [\"Reserved seating\", \"All sessions access\", \"Priority networking\", \"Welcome drink\"],\n      \"isFree\": true\n    }\n  ],\n  \"images\": [\n    \"https://example.com/open-source-meetup.jpg\",\n    \"https://example.com/cchub-venue.jpg\"\n  ],\n  \"tags\": [\"opensource\", \"community\", \"meetup\", \"networking\", \"free\", \"technology\", \"programming\", \"collaboration\"],\n  \"maxAttendees\": 150,\n  \"isPublic\": true\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/events",
              "host": ["{{baseUrl}}"],
              "path": ["events"]
            }
          }
        },
        {
          "name": "Update Event (Organizer)",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{authToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Updated Postman Test Event\",\n  \"description\": \"Updated description for the test event.\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/events/{{eventId}}",
              "host": ["{{baseUrl}}"],
              "path": ["events", "{{eventId}}"]
            }
          }
        },
        {
          "name": "Minor Event Update (Notifications Test)",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{authToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"description\": \"Minor update - testing attendee notifications for small changes\",\n  \"startTime\": \"19:00\",\n  \"category\": \"Business\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/events/{{eventId}}",
              "host": ["{{baseUrl}}"],
              "path": ["events", "{{eventId}}"]
            }
          }
        },
        {
          "name": "Major Event Update (Notifications Test)",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{authToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"venue\": {\n    \"name\": \"NEW Updated Venue\",\n    \"address\": \"456 Updated Street\",\n    \"city\": \"Abuja\",\n    \"state\": \"FCT\"\n  },\n  \"startDate\": \"2024-12-25T10:00:00.000Z\",\n  \"endDate\": \"2024-12-25T18:00:00.000Z\",\n  \"ticketTypes\": [\n    {\n      \"name\": \"Regular\",\n      \"price\": 7500,\n      \"quantity\": 100,\n      \"description\": \"Updated general admission\"\n    },\n    {\n      \"name\": \"VIP\",\n      \"price\": 15000,\n      \"quantity\": 25,\n      \"description\": \"New VIP option added\"\n    }\n  ]\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/events/{{eventId}}",
              "host": ["{{baseUrl}}"],
              "path": ["events", "{{eventId}}"]
            }
          }
        },
        {
          "name": "Delete Event (Organizer)",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{authToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "DELETE",
            "url": {
              "raw": "{{baseUrl}}/events/{{eventId}}",
              "host": ["{{baseUrl}}"],
              "path": ["events", "{{eventId}}"]
            }
          }
        },
        {
          "name": "Get Organizer's Events",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    console.log('✅ Organizer events retrieved successfully');",
                  "    console.log('📊 Organizer Dashboard Summary:');",
                  "    console.log('- Total Events Created:', response.data.length);",
                  "    ",
                  "    let approved = 0, pending = 0, rejected = 0, freeEvents = 0, paidEvents = 0;",
                  "    let totalRevenue = 0, totalAttendees = 0;",
                  "    ",
                  "    response.data.forEach((event, index) => {",
                  "        console.log(`\\n🎪 Event ${index + 1}:`);",
                  "        console.log('- Title:', event.title);",
                  "        console.log('- Status:', event.status);",
                  "        console.log('- Approved:', event.approved);",
                  "        console.log('- Type:', event.isFreeEvent ? 'Free' : 'Paid');",
                  "        console.log('- Attendees:', event.currentAttendees || 0);",
                  "        console.log('- Created:', new Date(event.createdAt).toLocaleDateString());",
                  "        ",
                  "        // Count statistics",
                  "        if (event.approved) approved++;",
                  "        else if (event.status === 'pending') pending++;",
                  "        else if (event.status === 'rejected') rejected++;",
                  "        ",
                  "        if (event.isFreeEvent) freeEvents++;",
                  "        else {",
                  "            paidEvents++;",
                  "            // Calculate revenue for paid events",
                  "            event.ticketTypes?.forEach(ticket => {",
                  "                totalRevenue += (ticket.sold || 0) * (ticket.price || 0);",
                  "            });",
                  "        }",
                  "        ",
                  "        totalAttendees += event.currentAttendees || 0;",
                  "    });",
                  "    ",
                  "    console.log('\\n📈 Organizer Statistics:');",
                  "    console.log('- Approved Events:', approved);",
                  "    console.log('- Pending Events:', pending);",
                  "    console.log('- Rejected Events:', rejected);",
                  "    console.log('- Free Events:', freeEvents);",
                  "    console.log('- Paid Events:', paidEvents);",
                  "    console.log('- Total Attendees:', totalAttendees);",
                  "    console.log('- Total Revenue: ₦' + totalRevenue.toLocaleString());",
                  "} else {",
                  "    console.log('❌ Failed to retrieve organizer events');",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{authToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}/events/organizer?page=1&limit=20",
              "host": ["{{baseUrl}}"],
              "path": ["events", "organizer"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "20"
                },
                {
                  "key": "status",
                  "value": "",
                  "description": "Filter by status: pending, approved, rejected",
                  "disabled": true
                }
              ]
            }
          }
        },
        {
          "name": "Get Event Attendees (Organizer)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    console.log('✅ Event attendees retrieved successfully');",
                  "    console.log('👥 Attendee Management Dashboard:');",
                  "    console.log('- Total Confirmed Attendees:', response.data.length);",
                  "    console.log('- Page:', response.meta?.pagination?.page || 1);",
                  "    console.log('- Total Attendees:', response.meta?.pagination?.total || 0);",
                  "    ",
                  "    let checkedIn = 0, pending = 0;",
                  "    let ticketTypeCounts = {};",
                  "    ",
                  "    response.data.forEach((booking, index) => {",
                  "        console.log(`\\n🎫 Attendee ${index + 1}:`);",
                  "        console.log('- Name:', booking.user?.firstName + ' ' + booking.user?.lastName);",
                  "        console.log('- Email:', booking.user?.email);",
                  "        console.log('- Phone:', booking.user?.phone || 'Not provided');",
                  "        console.log('- Ticket Type:', booking.ticketType);",
                  "        console.log('- Quantity:', booking.quantity);",
                  "        console.log('- Status:', booking.status);",
                  "        console.log('- Checked In:', !!booking.isCheckedIn);",
                  "        console.log('- Booking Date:', new Date(booking.createdAt).toLocaleDateString());",
                  "        ",
                  "        if (booking.isCheckedIn) checkedIn++;",
                  "        else pending++;",
                  "        ",
                  "        // Count ticket types",
                  "        if (!ticketTypeCounts[booking.ticketType]) {",
                  "            ticketTypeCounts[booking.ticketType] = 0;",
                  "        }",
                  "        ticketTypeCounts[booking.ticketType] += booking.quantity;",
                  "    });",
                  "    ",
                  "    console.log('\\n📊 Check-in Statistics:');",
                  "    console.log('- Checked In:', checkedIn);",
                  "    console.log('- Not Checked In:', pending);",
                  "    console.log('- Check-in Rate:', Math.round((checkedIn / response.data.length) * 100) + '%');",
                  "    ",
                  "    console.log('\\n🎟️ Ticket Type Distribution:');",
                  "    Object.entries(ticketTypeCounts).forEach(([type, count]) => {",
                  "        console.log(`- ${type}: ${count} tickets`);",
                  "    });",
                  "} else {",
                  "    console.log('❌ Failed to retrieve event attendees');",
                  "    console.log('Make sure you are the organizer of this event');",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{authToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}/events/{{eventId}}/attendees?page=1&limit=50",
              "host": ["{{baseUrl}}"],
              "path": ["events", "{{eventId}}", "attendees"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "50"
                }
              ]
            }
          }
        },
        {
          "name": "Check-in Attendee (Organizer/Admin)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    console.log('✅ Attendee checked in successfully');",
                  "    console.log('🎫 Check-in Details:');",
                  "    console.log('- Attendee:', response.data.attendee?.firstName + ' ' + response.data.attendee?.lastName);",
                  "    console.log('- Email:', response.data.attendee?.email);",
                  "    console.log('- Ticket Type:', response.data.booking?.ticketType);",
                  "    console.log('- Quantity:', response.data.booking?.quantity);",
                  "    console.log('- Check-in Time:', new Date(response.data.checkInTime).toLocaleString());",
                  "    console.log('- Booking Status:', response.data.booking?.status);",
                  "} else {",
                  "    console.log('❌ Check-in failed');",
                  "    console.log('Response:', pm.response.text());",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{authToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "PUT",
            "url": {
              "raw": "{{baseUrl}}/bookings/{{bookingId}}/checkin",
              "host": ["{{baseUrl}}"],
              "path": ["bookings", "{{bookingId}}", "checkin"]
            }
          }
        },
        {
          "name": "Verify QR Code for Check-in",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    console.log('✅ QR Code verified successfully');",
                  "    console.log('🔍 QR Verification Results:');",
                  "    console.log('- Valid:', response.data.valid);",
                  "    if (response.data.booking) {",
                  "        console.log('- Booking ID:', response.data.booking._id);",
                  "        console.log('- Attendee:', response.data.booking.attendee?.firstName + ' ' + response.data.booking.attendee?.lastName);",
                  "        console.log('- Ticket Type:', response.data.booking.ticketType);",
                  "        console.log('- Quantity:', response.data.booking.quantity);",
                  "        console.log('- Already Checked In:', response.data.booking.isCheckedIn);",
                  "        console.log('- Event:', response.data.booking.event?.title);",
                  "    }",
                  "} else {",
                  "    console.log('❌ QR Code verification failed');",
                  "    console.log('Response:', pm.response.text());",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{authToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"qrCode\": \"{\\\"bookingId\\\":\\\"{{bookingId}}\\\",\\\"eventId\\\":\\\"{{eventId}}\\\",\\\"reference\\\":\\\"{{paymentReference}}\\\",\\\"generatedAt\\\":\\\"2025-01-30T10:30:00.000Z\\\"}\"\n}",
              "description": "QR code data in JSON string format"
            },
            "url": {
              "raw": "{{baseUrl}}/bookings/verify-qr",
              "host": ["{{baseUrl}}"],
              "path": ["bookings", "verify-qr"]
            }
          }
        },
        {
          "name": "Delete Event (Organizer/Admin)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    console.log('✅ Event deleted successfully');",
                  "    console.log('\\n🗑️ Deletion Details:');",
                  "    console.log('Event Title:', response.data.eventTitle);",
                  "    console.log('Deleted By:', response.data.deletedBy === 'admin' ? 'Administrator' : 'Organizer');",
                  "    console.log('Reason:', response.data.reason);",
                  "    console.log('\\n📧 Notifications have been sent to relevant parties');",
                  "} else {",
                  "    console.log('❌ Failed to delete event');",
                  "    const errorResponse = pm.response.json();",
                  "    console.log('Error:', errorResponse.message);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\\n  \\\"reason\\\": \\\"Event no longer needed - organizer decision\\\"\\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/events/{{eventId}}",
              "host": ["{{baseUrl}}"],
              "path": ["events", "{{eventId}}"]
            },
            "description": "Delete an event. Only the organizer or admin can delete events. Events with confirmed bookings cannot be deleted and must be cancelled instead. Sends notifications to organizer (if admin deletes) or all admins (if organizer deletes)."
          }
        }
      ]
    },
    {
      "name": "Admin Management",
      "item": [
        {
          "name": "Admin Dashboard Overview",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    console.log('✅ Admin dashboard data retrieved successfully');",
                  "    console.log('\\n📊 Admin Dashboard Overview:');",
                  "    ",
                  "    const stats = response.data;",
                  "    console.log('👥 User Statistics:');",
                  "    console.log('- Total Users:', stats.totalUsers || 0);",
                  "    console.log('- Total Organizers:', stats.totalOrganizers || 0);",
                  "    console.log('- Active Users:', stats.activeUsers || 0);",
                  "    console.log('- Blocked Users:', stats.blockedUsers || 0);",
                  "    ",
                  "    console.log('\\n🎪 Event Statistics:');",
                  "    console.log('- Total Events:', stats.totalEvents || 0);",
                  "    console.log('- Approved Events:', stats.approvedEvents || 0);",
                  "    console.log('- Pending Approval:', stats.pendingEvents || 0);",
                  "    console.log('- Rejected Events:', stats.rejectedEvents || 0);",
                  "    console.log('- Free Events:', stats.freeEvents || 0);",
                  "    console.log('- Paid Events:', stats.paidEvents || 0);",
                  "    ",
                  "    console.log('\\n🎫 Booking Statistics:');",
                  "    console.log('- Total Bookings:', stats.totalBookings || 0);",
                  "    console.log('- Confirmed Bookings:', stats.confirmedBookings || 0);",
                  "    console.log('- Total Revenue: ₦' + (stats.totalRevenue || 0).toLocaleString());",
                  "    console.log('- Platform Fees: ₦' + (stats.platformFees || 0).toLocaleString());",
                  "    ",
                  "    if (stats.recentEvents) {",
                  "        console.log('\\n📅 Recent Events Requiring Review:');",
                  "        stats.recentEvents.forEach((event, index) => {",
                  "            console.log(`${index + 1}. ${event.title} - ${event.status}`);",
                  "        });",
                  "    }",
                  "} else {",
                  "    console.log('❌ Failed to retrieve admin dashboard data');",
                  "    console.log('Make sure you are logged in as an admin');",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{authToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}/admin/dashboard",
              "host": ["{{baseUrl}}"],
              "path": ["admin", "dashboard"]
            }
          }
        },
        {
          "name": "Get All Users (Admin)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    console.log('✅ User list retrieved successfully');",
                  "    console.log('\\n👥 User Management Dashboard:');",
                  "    console.log('- Users on this page:', response.data.length);",
                  "    console.log('- Current page:', response.meta?.pagination?.page || 1);",
                  "    console.log('- Total users:', response.meta?.pagination?.total || 0);",
                  "    ",
                  "    let activeUsers = 0, blockedUsers = 0;",
                  "    let roleCount = {};",
                  "    ",
                  "    response.data.forEach((user, index) => {",
                  "        console.log(`\\n👤 User ${index + 1}:`);",
                  "        console.log('- Name:', user.firstName + ' ' + user.lastName);",
                  "        console.log('- Email:', user.email);",
                  "        console.log('- Role:', user.role);",
                  "        console.log('- Verified:', !!user.isVerified);",
                  "        console.log('- Blocked:', !!user.blocked);",
                  "        console.log('- Joined:', new Date(user.createdAt).toLocaleDateString());",
                  "        ",
                  "        if (user.blocked) blockedUsers++;",
                  "        else activeUsers++;",
                  "        ",
                  "        if (!roleCount[user.role]) roleCount[user.role] = 0;",
                  "        roleCount[user.role]++;",
                  "    });",
                  "    ",
                  "    console.log('\\n📊 User Statistics:');",
                  "    console.log('- Active Users:', activeUsers);",
                  "    console.log('- Blocked Users:', blockedUsers);",
                  "    ",
                  "    console.log('\\n👔 Role Distribution:');",
                  "    Object.entries(roleCount).forEach(([role, count]) => {",
                  "        console.log(`- ${role}s: ${count}`);",
                  "    });",
                  "} else {",
                  "    console.log('❌ Failed to retrieve users');",
                  "    console.log('Make sure you are logged in as an admin');",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{authToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}/admin/users?page=1&limit=10",
              "host": ["{{baseUrl}}"],
              "path": ["admin", "users"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "10"
                },
                {
                  "key": "role",
                  "value": "",
                  "description": "Filter by role: admin, organizer, user",
                  "disabled": true
                }
              ]
            }
          }
        },
        {
          "name": "Get All Events for Review (Admin)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    console.log('✅ Events for admin review retrieved successfully');",
                  "    console.log('\\n📋 Event Review Dashboard:');",
                  "    console.log('- Events requiring review:', response.data.length);",
                  "    ",
                  "    let pendingCount = 0, approvedCount = 0, rejectedCount = 0;",
                  "    let freeEventCount = 0, paidEventCount = 0;",
                  "    ",
                  "    response.data.forEach((event, index) => {",
                  "        console.log(`\\n🎪 Event ${index + 1}:`);",
                  "        console.log('- Title:', event.title);",
                  "        console.log('- Organizer:', event.organizer?.firstName + ' ' + event.organizer?.lastName);",
                  "        console.log('- Organizer Email:', event.organizer?.email);",
                  "        console.log('- Category:', event.category);",
                  "        console.log('- Type:', event.isFreeEvent ? 'Free Event' : 'Paid Event');",
                  "        console.log('- Status:', event.status);",
                  "        console.log('- Approved:', event.approved);",
                  "        console.log('- Venue:', event.venue?.name + ', ' + event.venue?.city);",
                  "        console.log('- Event Date:', new Date(event.startDate).toLocaleDateString());",
                  "        console.log('- Created:', new Date(event.createdAt).toLocaleDateString());",
                  "        ",
                  "        // Count ticket types and prices",
                  "        if (event.ticketTypes?.length > 0) {",
                  "            console.log('- Ticket Types:');",
                  "            event.ticketTypes.forEach(ticket => {",
                  "                console.log(`  • ${ticket.name}: ₦${ticket.price} (${ticket.quantity} available)`);",
                  "            });",
                  "        }",
                  "        ",
                  "        // Statistics",
                  "        if (event.status === 'pending') pendingCount++;",
                  "        else if (event.approved) approvedCount++;",
                  "        else rejectedCount++;",
                  "        ",
                  "        if (event.isFreeEvent) freeEventCount++;",
                  "        else paidEventCount++;",
                  "    });",
                  "    ",
                  "    console.log('\\n📊 Review Statistics:');",
                  "    console.log('- Pending Approval:', pendingCount);",
                  "    console.log('- Already Approved:', approvedCount);",
                  "    console.log('- Rejected:', rejectedCount);",
                  "    console.log('- Free Events:', freeEventCount);",
                  "    console.log('- Paid Events:', paidEventCount);",
                  "} else {",
                  "    console.log('❌ Failed to retrieve events for review');",
                  "    console.log('Make sure you are logged in as an admin');",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{authToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}/admin/events?page=1&limit=10",
              "host": ["{{baseUrl}}"],
              "path": ["admin", "events"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "10"
                },
                {
                  "key": "status",
                  "value": "",
                  "description": "Filter by status: pending, approved, rejected",
                  "disabled": true
                }
              ]
            }
          }
        },
        {
          "name": "Approve Event (Admin)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    console.log('✅ Event approved successfully');",
                  "    console.log('\\n🎉 Event Approval Details:');",
                  "    console.log('- Event ID:', response.data.eventId || 'N/A');",
                  "    console.log('- Event Title:', response.data.eventTitle || 'N/A');",
                  "    console.log('- New Status:', response.data.status || 'approved');",
                  "    console.log('- Approved By:', response.data.approvedBy || 'Current Admin');",
                  "    console.log('- Approval Time:', new Date().toLocaleString());",
                  "    console.log('- Comments:', response.data.comments || 'Event approved for publication');",
                  "    ",
                  "    console.log('\\n📧 Notifications Sent:');",
                  "    console.log('- ✅ Organizer notified of approval');",
                  "    console.log('- ✅ Event now visible to public');",
                  "    console.log('- ✅ User base notified of new event');",
                  "} else {",
                  "    console.log('❌ Event approval failed');",
                  "    console.log('Response:', pm.response.text());",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{authToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"approved\": true,\n  \"comments\": \"Excellent event! Well-structured agenda and appropriate pricing. Approved for immediate publication. The event meets all our quality standards and should attract good attendance.\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/admin/events/{{eventId}}/review",
              "host": ["{{baseUrl}}"],
              "path": ["admin", "events", "{{eventId}}", "review"]
            }
          }
        },
        {
          "name": "Reject Event (Admin)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    console.log('✅ Event rejected successfully');",
                  "    console.log('\\n❌ Event Rejection Details:');",
                  "    console.log('- Event ID:', response.data.eventId || 'N/A');",
                  "    console.log('- Event Title:', response.data.eventTitle || 'N/A');",
                  "    console.log('- New Status:', response.data.status || 'rejected');",
                  "    console.log('- Rejected By:', response.data.rejectedBy || 'Current Admin');",
                  "    console.log('- Rejection Time:', new Date().toLocaleString());",
                  "    console.log('- Rejection Reason:', response.data.rejectionReason || 'See rejection details');",
                  "    ",
                  "    console.log('\\n📧 Notifications:');",
                  "    console.log('- ✅ Organizer notified of rejection with feedback');",
                  "    console.log('- ✅ Organizer can edit and resubmit event');",
                  "} else {",
                  "    console.log('❌ Event rejection failed');",
                  "    console.log('Response:', pm.response.text());",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{authToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"approved\": false,\n  \"rejectionReason\": \"Event description needs more details about the agenda and speakers. Please provide:\n\n1. Detailed schedule with session times\n2. Speaker profiles and credentials  \n3. Clear learning outcomes for attendees\n4. Venue accessibility information\n5. Refund policy details\n\nOnce these details are added, please resubmit for review. The event concept is good but needs more comprehensive information for attendees.\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/admin/events/{{eventId}}/review",
              "host": ["{{baseUrl}}"],
              "path": ["admin", "events", "{{eventId}}", "review"]
            }
          }
        },
        {
          "name": "Block/Unblock User (Admin)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    console.log('✅ User status updated successfully');",
                  "    console.log('\\n👤 User Status Change:');",
                  "    console.log('- User ID:', response.data.userId || 'N/A');",
                  "    console.log('- User Email:', response.data.email || 'N/A');",
                  "    console.log('- New Status:', response.data.blocked ? 'BLOCKED' : 'ACTIVE');",
                  "    console.log('- Action By:', 'Current Admin');",
                  "    console.log('- Action Time:', new Date().toLocaleString());",
                  "    ",
                  "    if (response.data.blocked) {",
                  "        console.log('\\n🚫 User Account Blocked:');",
                  "        console.log('- User cannot login');",
                  "        console.log('- User cannot create events');",
                  "        console.log('- User cannot make bookings');",
                  "        console.log('- Existing bookings remain valid');",
                  "    } else {",
                  "        console.log('\\n✅ User Account Unblocked:');",
                  "        console.log('- User can now login');",
                  "        console.log('- User can create events (if organizer)');",
                  "        console.log('- User can make new bookings');",
                  "        console.log('- Full platform access restored');",
                  "    }",
                  "} else {",
                  "    console.log('❌ User status update failed');",
                  "    console.log('Response:', pm.response.text());",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{authToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"blocked\": true\n}",
              "description": "Set to true to block user, false to unblock"
            },
            "url": {
              "raw": "{{baseUrl}}/admin/users/{{userId}}/status",
              "host": ["{{baseUrl}}"],
              "path": ["admin", "users", "{{userId}}", "status"]
            }
          }
        },
        {
          "name": "Search Users (Admin)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    console.log('✅ User search completed successfully');",
                  "    console.log('\\n🔍 Search Results:');",
                  "    console.log('- Users found:', response.data.length);",
                  "    ",
                  "    response.data.forEach((user, index) => {",
                  "        console.log(`\\n👤 User ${index + 1}:`);",
                  "        console.log('- Name:', user.firstName + ' ' + user.lastName);",
                  "        console.log('- Email:', user.email);",
                  "        console.log('- Role:', user.role);",
                  "        console.log('- Status:', user.blocked ? 'Blocked' : 'Active');",
                  "        console.log('- Verified:', !!user.isVerified);",
                  "        console.log('- Member since:', new Date(user.createdAt).toLocaleDateString());",
                  "        ",
                  "        if (user.role === 'organizer') {",
                  "            console.log('- Events created:', user.eventsCreated?.length || 0);",
                  "        }",
                  "        if (user.role === 'user') {",
                  "            console.log('- Events attended:', user.eventsAttended?.length || 0);",
                  "        }",
                  "    });",
                  "} else {",
                  "    console.log('❌ User search failed');",
                  "    console.log('Response:', pm.response.text());",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{authToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}/admin/users/search?email=user@example.com",
              "host": ["{{baseUrl}}"],
              "path": ["admin", "users", "search"],
              "query": [
                {
                  "key": "email",
                  "value": "user@example.com",
                  "description": "Search by email address"
                },
                {
                  "key": "name",
                  "value": "",
                  "description": "Search by name",
                  "disabled": true
                },
                {
                  "key": "role",
                  "value": "",
                  "description": "Filter by role",
                  "disabled": true
                }
              ]
            }
          }
        },
        {
          "name": "Organizer Warning System",
          "item": [
            {
              "name": "Send Warning to Organizer",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "if (pm.response.code === 200) {",
                      "    const response = pm.response.json();",
                      "    console.log('✅ Warning sent to organizer successfully');",
                      "    console.log('\\n⚠️ Warning Details:');",
                      "    console.log('Event:', response.data.eventTitle);",
                      "    console.log('Organizer:', response.data.organizer.name);",
                      "    console.log('Email:', response.data.organizer.email);",
                      "    console.log('Reason:', response.data.warning.reason);",
                      "    console.log('Severity:', response.data.warning.severity);",
                      "    console.log('Warning Count:', response.data.warning.warningCount);",
                      "    console.log('Flagged for Deletion:', response.data.warning.flaggedForDeletion);",
                      "    if (response.data.warning.deletionDeadline) {",
                      "        console.log('Deletion Deadline:', new Date(response.data.warning.deletionDeadline).toLocaleDateString());",
                      "    }",
                      "} else {",
                      "    console.log('❌ Failed to send warning');",
                      "}"
                    ]
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\\n  \\\"reason\\\": \\\"Your event does not meet our community guidelines. Please ensure your event description is professional and includes accurate venue information. Also, your event pricing seems inappropriate for the type of event advertised.\\\",\\n  \\\"severity\\\": \\\"major\\\",\\n  \\\"autoDeleteAfterDays\\\": 7\\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/admin/events/{{eventId}}/warn",
                  "host": ["{{baseUrl}}"],
                  "path": ["admin", "events", "{{eventId}}", "warn"]
                },
                "description": "Send a warning to an organizer when their event doesn't meet business standards. Can include auto-deletion deadline."
              }
            },
            {
              "name": "Get Event Warnings History",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "if (pm.response.code === 200) {",
                      "    const response = pm.response.json();",
                      "    console.log('✅ Event warnings retrieved successfully');",
                      "    console.log('\\n📋 Event Warning History:');",
                      "    console.log('Event:', response.data.eventTitle);",
                      "    console.log('Organizer:', response.data.organizer.name);",
                      "    console.log('Total Warnings:', response.data.warningCount);",
                      "    console.log('Flagged for Deletion:', response.data.flaggedForDeletion);",
                      "    ",
                      "    if (response.data.warnings && response.data.warnings.length > 0) {",
                      "        console.log('\\n⚠️ Warning Details:');",
                      "        response.data.warnings.forEach((warning, index) => {",
                      "            console.log(`${index + 1}. ${warning.severity.toUpperCase()} - ${warning.reason}`);",
                      "            console.log(`   Issued by: ${warning.issuedBy} on ${new Date(warning.issuedAt).toLocaleDateString()}`);",
                      "        });",
                      "    }",
                      "} else {",
                      "    console.log('❌ Failed to retrieve event warnings');",
                      "}"
                    ]
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/admin/events/{{eventId}}/warnings",
                  "host": ["{{baseUrl}}"],
                  "path": ["admin", "events", "{{eventId}}", "warnings"]
                },
                "description": "Get the complete warning history for a specific event."
              }
            },
            {
              "name": "Get Events Flagged for Deletion",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "if (pm.response.code === 200) {",
                      "    const response = pm.response.json();",
                      "    console.log('✅ Flagged events retrieved successfully');",
                      "    console.log('\\n🚩 Events Flagged for Deletion:');",
                      "    console.log('Total flagged events:', response.data.length);",
                      "    ",
                      "    if (response.data && response.data.length > 0) {",
                      "        response.data.forEach((event, index) => {",
                      "            console.log(`\\n${index + 1}. ${event.title}`);",
                      "            console.log(`   Organizer: ${event.organizer.firstName} ${event.organizer.lastName}`);",
                      "            console.log(`   Warnings: ${event.warningCount}`);",
                      "            console.log(`   Days Remaining: ${event.daysRemaining}`);",
                      "            console.log(`   Status: ${event.overdue ? 'OVERDUE' : 'Active'}`);",
                      "            if (event.deletionDeadline) {",
                      "                console.log(`   Deadline: ${new Date(event.deletionDeadline).toLocaleDateString()}`);",
                      "            }",
                      "        });",
                      "    } else {",
                      "        console.log('No events currently flagged for deletion');",
                      "    }",
                      "} else {",
                      "    console.log('❌ Failed to retrieve flagged events');",
                      "}"
                    ]
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/admin/events/flagged?page=1&limit=10",
                  "host": ["{{baseUrl}}"],
                  "path": ["admin", "events", "flagged"],
                  "query": [
                    {
                      "key": "page",
                      "value": "1",
                      "description": "Page number"
                    },
                    {
                      "key": "limit",
                      "value": "10",
                      "description": "Items per page"
                    }
                  ]
                },
                "description": "Get all events that have been flagged for deletion due to warnings."
              }
            },
            {
              "name": "Auto-Delete Overdue Events",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "if (pm.response.code === 200) {",
                      "    const response = pm.response.json();",
                      "    console.log('✅ Auto-deletion process completed');",
                      "    console.log('\\n🗑️ Deletion Summary:');",
                      "    console.log('Events deleted:', response.data.deletedEventsCount);",
                      "    ",
                      "    if (response.data.deletedEvents && response.data.deletedEvents.length > 0) {",
                      "        console.log('\\nDeleted Events:');",
                      "        response.data.deletedEvents.forEach((event, index) => {",
                      "            console.log(`${index + 1}. ${event.title} (Organizer: ${event.organizer})`);",
                      "        });",
                      "    } else {",
                      "        console.log('No overdue events found for deletion');",
                      "    }",
                      "} else {",
                      "    console.log('❌ Failed to process auto-deletion');",
                      "}"
                    ]
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{}"
                },
                "url": {
                  "raw": "{{baseUrl}}/admin/events/auto-delete",
                  "host": ["{{baseUrl}}"],
                  "path": ["admin", "events", "auto-delete"]
                },
                "description": "Automatically delete all events that have passed their deletion deadline."
              }
            },
            {
              "name": "Remove Deletion Flag (Unflag Event)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "if (pm.response.code === 200) {",
                      "    const response = pm.response.json();",
                      "    console.log('✅ Event unflagged successfully');",
                      "    console.log('\\n🎯 Unflag Details:');",
                      "    console.log('Event:', response.data.title);",
                      "    console.log('Flagged for Deletion:', response.data.flaggedForDeletion);",
                      "    console.log('Status: Event is now safe from auto-deletion');",
                      "} else {",
                      "    console.log('❌ Failed to unflag event');",
                      "}"
                    ]
                  }
                }
              ],
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{}"
                },
                "url": {
                  "raw": "{{baseUrl}}/admin/events/{{eventId}}/unflag",
                  "host": ["{{baseUrl}}"],
                  "path": ["admin", "events", "{{eventId}}", "unflag"]
                },
                "description": "Remove the deletion flag from an event, preventing auto-deletion."
              }
            }
          ]
        }
      ]
    },
    {
      "name": "User Details Management",
      "item": [
        {
          "name": "Get User Details by ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test successful response",
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has user details', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.success).to.be.true;",
                  "    pm.expect(responseJson.data).to.have.property('firstName');",
                  "    pm.expect(responseJson.data).to.have.property('totalSpent');",
                  "    pm.expect(responseJson.data).to.have.property('statistics');",
                  "    pm.expect(responseJson.data).to.have.property('financialSummary');",
                  "});",
                  "",
                  "pm.test('Statistics are properly formatted', function () {",
                  "    const responseJson = pm.response.json();",
                  "    const stats = responseJson.data.statistics;",
                  "    pm.expect(stats).to.have.property('eventsCreated');",
                  "    pm.expect(stats).to.have.property('eventsAttended');",
                  "    pm.expect(stats).to.have.property('accountAge');",
                  "});",
                  "",
                  "console.log('👤 User Details Response:', JSON.stringify(pm.response.json(), null, 2));"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{authToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/user-details/{{userId}}",
              "host": ["{{baseUrl}}"],
              "path": ["user-details", "{{userId}}"]
            },
            "description": "Get comprehensive details of a specific user. Includes financial summary, purchase history, statistics, and role-specific metrics. Available to all authenticated users for their own data, admins can access any user's details."
          }
        },
        {
          "name": "Get All Users Details (Admin)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test successful response",
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response contains users array with pagination', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.success).to.be.true;",
                  "    pm.expect(responseJson.data).to.have.property('users');",
                  "    pm.expect(responseJson.data).to.have.property('pagination');",
                  "    pm.expect(responseJson.data.users).to.be.an('array');",
                  "});",
                  "",
                  "pm.test('Users have comprehensive details', function () {",
                  "    const responseJson = pm.response.json();",
                  "    if (responseJson.data.users.length > 0) {",
                  "        const user = responseJson.data.users[0];",
                  "        pm.expect(user).to.have.property('_id');",
                  "        pm.expect(user).to.have.property('firstName');",
                  "        pm.expect(user).to.have.property('role');",
                  "        pm.expect(user).to.have.property('totalSpent');",
                  "        pm.expect(user).to.have.property('statistics');",
                  "    }",
                  "});",
                  "",
                  "pm.test('Pagination info is correct', function () {",
                  "    const responseJson = pm.response.json();",
                  "    const pagination = responseJson.data.pagination;",
                  "    pm.expect(pagination).to.have.property('currentPage');",
                  "    pm.expect(pagination).to.have.property('totalPages');",
                  "    pm.expect(pagination).to.have.property('totalUsers');",
                  "    pm.expect(pagination).to.have.property('hasNext');",
                  "    pm.expect(pagination).to.have.property('hasPrev');",
                  "});",
                  "",
                  "console.log('👥 All Users Details Response:', JSON.stringify(pm.response.json(), null, 2));"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{authToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/user-details?page=1&limit=10&role=organizer&sortBy=totalSpent&sortOrder=desc&search=&minSpent=0&maxSpent=50000",
              "host": ["{{baseUrl}}"],
              "path": ["user-details"],
              "query": [
                {
                  "key": "page",
                  "value": "1",
                  "description": "Page number for pagination"
                },
                {
                  "key": "limit",
                  "value": "10",
                  "description": "Number of users per page"
                },
                {
                  "key": "role",
                  "value": "organizer",
                  "description": "Filter by user role (admin, organizer, user)"
                },
                {
                  "key": "sortBy",
                  "value": "totalSpent",
                  "description": "Sort field (firstName, lastName, email, createdAt, totalSpent)"
                },
                {
                  "key": "sortOrder",
                  "value": "desc",
                  "description": "Sort order (asc, desc)"
                },
                {
                  "key": "search",
                  "value": "",
                  "description": "Search in names and email"
                },
                {
                  "key": "minSpent",
                  "value": "0",
                  "description": "Minimum spending filter"
                },
                {
                  "key": "maxSpent",
                  "value": "50000",
                  "description": "Maximum spending filter"
                }
              ]
            },
            "description": "Get comprehensive details of all users with advanced filtering, sorting, and pagination. Admin-only endpoint that provides financial analytics, user statistics, and comprehensive user management data."
          }
        }
      ]
    },
    {
      "name": "Articles & Blog Management",
      "item": [
        {
          "name": "Create Article (Admin Only)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test successful response",
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Article created successfully', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.success).to.be.true;",
                  "    pm.expect(responseJson.data).to.have.property('title');",
                  "    pm.expect(responseJson.data).to.have.property('slug');",
                  "    pm.expect(responseJson.data).to.have.property('_id');",
                  "    ",
                  "    // Set article ID for other requests",
                  "    pm.environment.set('articleId', responseJson.data._id);",
                  "});",
                  "",
                  "pm.test('Article has proper metadata', function () {",
                  "    const responseJson = pm.response.json();",
                  "    const article = responseJson.data;",
                  "    pm.expect(article).to.have.property('author');",
                  "    pm.expect(article).to.have.property('category');",
                  "    pm.expect(article).to.have.property('readTime');",
                  "    pm.expect(article).to.have.property('publishedAt');",
                  "});",
                  "",
                  "console.log('📝 Article Created:', JSON.stringify(pm.response.json(), null, 2));"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{authToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"The Ultimate Guide to Event Security in Nigeria\",\n  \"excerpt\": \"Comprehensive guide to ensuring the safety and security of your events in Nigeria. Learn about best practices, legal requirements, and technology solutions for event security.\",\n  \"content\": \"<h2>Introduction to Event Security</h2><p>Event security is a critical aspect of successful event planning in Nigeria. With the increasing number of events and the diverse security challenges across different regions, organizers must prioritize comprehensive security planning to ensure attendee safety and event success.</p><h2>Understanding Nigerian Security Context</h2><p>Nigeria's security landscape requires event organizers to be aware of:</p><ul><li>Regional security variations across states</li><li>Urban vs rural security considerations</li><li>Cultural and religious sensitivities</li><li>Government regulations and compliance requirements</li></ul><h2>Pre-Event Security Planning</h2><h3>Risk Assessment</h3><ul><li><strong>Venue Security Audit:</strong> Comprehensive evaluation of the event location</li><li><strong>Crowd Analysis:</strong> Understanding expected attendee demographics and behavior</li><li><strong>Threat Assessment:</strong> Identifying potential security risks specific to your event</li><li><strong>Emergency Planning:</strong> Developing comprehensive response protocols</li></ul><h3>Security Team Selection</h3><ul><li>Licensed security companies with proven track records</li><li>Personnel trained in crowd management</li><li>Local knowledge and language capabilities</li><li>Coordination with local law enforcement</li></ul><h2>Technology Solutions</h2><h3>Access Control Systems</h3><ul><li>Electronic ticketing with QR codes</li><li>RFID wristbands for multi-day events</li><li>Facial recognition systems for VIP areas</li><li>Mobile check-in applications</li></ul><h3>Surveillance and Monitoring</h3><ul><li>CCTV camera placement and monitoring</li><li>Drone surveillance for large outdoor events</li><li>Communication systems for security teams</li><li>Emergency alert systems</li></ul><h2>Crowd Management</h2><h3>Flow Design</h3><ul><li>Strategic entrance and exit placement</li><li>Clear signage and wayfinding</li><li>Capacity management and monitoring</li><li>Queue management systems</li></ul><h3>Emergency Procedures</h3><ul><li>Evacuation plans and routes</li><li>Medical emergency protocols</li><li>Fire safety measures</li><li>Communication during emergencies</li></ul><h2>Legal and Compliance Requirements</h2><h3>Permits and Licenses</h3><ul><li>Event permits from local authorities</li><li>Security service licenses</li><li>Fire safety certificates</li><li>Insurance requirements</li></ul><h3>Documentation</h3><ul><li>Security plans and protocols</li><li>Staff training records</li><li>Incident reporting procedures</li><li>Post-event security reports</li></ul><h2>Special Considerations</h2><h3>VIP Protection</h3><ul><li>Dedicated security details</li><li>Secure transportation arrangements</li><li>Protected areas and access routes</li><li>Background checks for close-contact staff</li></ul><h3>Cultural Events</h3><ul><li>Religious sensitivity and protocols</li><li>Traditional security customs</li><li>Community elder involvement</li><li>Cultural artifact protection</li></ul><h2>Budget Planning</h2><h3>Cost Factors</h3><ul><li><strong>Personnel Costs:</strong> Security guards, supervisors, specialists</li><li><strong>Technology Costs:</strong> Equipment rental, installation, monitoring</li><li><strong>Insurance Costs:</strong> Liability coverage, equipment protection</li><li><strong>Permit Costs:</strong> Government fees and compliance costs</li></ul><h3>Cost-Effective Solutions</h3><ul><li>Volunteer security training programs</li><li>Community partnership initiatives</li><li>Technology sharing with other events</li><li>Bulk contracting for multiple events</li></ul><h2>Post-Event Security Review</h2><h3>Incident Analysis</h3><ul><li>Detailed incident reports and analysis</li><li>Security footage review</li><li>Staff debriefing sessions</li><li>Attendee feedback collection</li></ul><h3>Continuous Improvement</h3><ul><li>Security protocol updates</li><li>Staff training improvements</li><li>Technology upgrades</li><li>Relationship building with authorities</li></ul><h2>Case Studies</h2><h3>Lagos Music Festival Success</h3><p>A major music festival in Lagos successfully managed 50,000 attendees over three days using a combination of advanced technology, well-trained personnel, and excellent coordination with local authorities.</p><h3>Abuja Corporate Conference</h3><p>A high-profile business conference in Abuja demonstrated effective VIP protection and general security management, ensuring the safety of government officials and business leaders.</p><h2>Emergency Contacts and Resources</h2><h3>National Emergency Numbers</h3><ul><li><strong>Police Emergency:</strong> 199</li><li><strong>Fire Service:</strong> 199</li><li><strong>Medical Emergency:</strong> 199</li><li><strong>NEMA:</strong> 0800-NEMA-911</li></ul><h3>Professional Organizations</h3><ul><li>Association of Private Security Companies of Nigeria (APSCN)</li><li>Event Management Association of Nigeria (EMAN)</li><li>Nigerian Security and Civil Defence Corps (NSCDC)</li></ul><h2>Conclusion</h2><p>Effective event security in Nigeria requires comprehensive planning, proper resource allocation, and strong partnerships with local authorities and security professionals. By implementing these best practices and staying current with security trends and regulations, event organizers can create safe, secure, and successful events that attendees can enjoy with confidence.</p><p>Remember that security is not just about preventing incidents—it's about creating an environment where attendees feel safe, comfortable, and able to fully engage with your event experience. Invest in proper security planning from the beginning, and view it as an essential component of event success rather than just a necessary expense.</p>\",\n  \"image\": \"https://images.unsplash.com/photo-1556075798-4825dfaaf498?w=800&h=400&fit=crop\",\n  \"author\": \"Security Expert\",\n  \"category\": \"Business\",\n  \"tags\": [\"security\", \"safety\", \"nigeria\", \"event planning\", \"crowd management\"],\n  \"featured\": true,\n  \"status\": \"published\",\n  \"seo\": {\n    \"metaTitle\": \"Complete Guide to Event Security in Nigeria - Safety Best Practices\",\n    \"metaDescription\": \"Learn essential event security strategies for Nigeria. Comprehensive guide covering planning, technology, and compliance.\",\n    \"keywords\": [\"event security nigeria\", \"crowd management\", \"event safety\", \"security planning\"]\n  }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/articles",
              "host": ["{{baseUrl}}"],
              "path": ["articles"]
            },
            "description": "Create a new article/blog post. Only admins can create articles. The system automatically generates slugs, calculates read time, and handles SEO optimization."
          }
        },
        {
          "name": "Get All Articles",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test successful response",
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response contains articles array', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.success).to.be.true;",
                  "    pm.expect(responseJson.data).to.be.an('array');",
                  "});",
                  "",
                  "pm.test('Articles have required fields', function () {",
                  "    const responseJson = pm.response.json();",
                  "    if (responseJson.data.length > 0) {",
                  "        const article = responseJson.data[0];",
                  "        pm.expect(article).to.have.property('title');",
                  "        pm.expect(article).to.have.property('excerpt');",
                  "        pm.expect(article).to.have.property('author');",
                  "        pm.expect(article).to.have.property('category');",
                  "        pm.expect(article).to.have.property('readTime');",
                  "        pm.expect(article).to.not.have.property('content'); // Content excluded in listing",
                  "    }",
                  "});",
                  "",
                  "console.log('📚 Articles Response:', JSON.stringify(pm.response.json(), null, 2));"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/articles?page=1&limit=10&category=Technology&featured=true&search=&author=&sortBy=publishedAt&sortOrder=desc",
              "host": ["{{baseUrl}}"],
              "path": ["articles"],
              "query": [
                {
                  "key": "page",
                  "value": "1",
                  "description": "Page number"
                },
                {
                  "key": "limit",
                  "value": "10",
                  "description": "Articles per page"
                },
                {
                  "key": "category",
                  "value": "Technology",
                  "description": "Filter by category"
                },
                {
                  "key": "featured",
                  "value": "true",
                  "description": "Filter featured articles"
                },
                {
                  "key": "search",
                  "value": "",
                  "description": "Search in title and content"
                },
                {
                  "key": "author",
                  "value": "",
                  "description": "Filter by author"
                },
                {
                  "key": "sortBy",
                  "value": "publishedAt",
                  "description": "Sort field"
                },
                {
                  "key": "sortOrder",
                  "value": "desc",
                  "description": "Sort order"
                }
              ]
            },
            "description": "Get all published articles with filtering and pagination. Public endpoint - no authentication required."
          }
        },
        {
          "name": "Get Featured Articles",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('All articles are featured', function () {",
                  "    const responseJson = pm.response.json();",
                  "    responseJson.data.forEach(article => {",
                  "        pm.expect(article.featured).to.be.true;",
                  "    });",
                  "});",
                  "",
                  "console.log('⭐ Featured Articles:', JSON.stringify(pm.response.json(), null, 2));"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/articles/featured?limit=6",
              "host": ["{{baseUrl}}"],
              "path": ["articles", "featured"],
              "query": [
                {
                  "key": "limit",
                  "value": "6",
                  "description": "Number of featured articles to return"
                }
              ]
            },
            "description": "Get featured articles for homepage or promotional sections."
          }
        },
        {
          "name": "Get Article by ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Article has full content', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.data).to.have.property('content');",
                  "    pm.expect(responseJson.data).to.have.property('views');",
                  "});",
                  "",
                  "pm.test('View count incremented', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.data.views).to.be.above(0);",
                  "});",
                  "",
                  "console.log('📖 Article Detail:', JSON.stringify(pm.response.json(), null, 2));"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/articles/{{articleId}}",
              "host": ["{{baseUrl}}"],
              "path": ["articles", "{{articleId}}"]
            },
            "description": "Get a single article by ID or slug with full content. Automatically increments view count."
          }
        },
        {
          "name": "Get Article Categories",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Categories array returned', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.data).to.be.an('array');",
                  "    pm.expect(responseJson.data.length).to.be.above(0);",
                  "});",
                  "",
                  "console.log('🏷️ Article Categories:', JSON.stringify(pm.response.json(), null, 2));"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/articles/categories",
              "host": ["{{baseUrl}}"],
              "path": ["articles", "categories"]
            },
            "description": "Get all available article categories."
          }
        },
        {
          "name": "Get Articles by Category",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('All articles match category', function () {",
                  "    const responseJson = pm.response.json();",
                  "    const category = pm.request.url.path[pm.request.url.path.length - 1];",
                  "    responseJson.data.forEach(article => {",
                  "        pm.expect(article.category).to.equal(category);",
                  "    });",
                  "});",
                  "",
                  "console.log('📂 Category Articles:', JSON.stringify(pm.response.json(), null, 2));"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/articles/category/Technology?page=1&limit=10",
              "host": ["{{baseUrl}}"],
              "path": ["articles", "category", "Technology"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "10"
                }
              ]
            },
            "description": "Get articles filtered by specific category with pagination."
          }
        },
        {
          "name": "Update Article (Admin Only)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Article updated successfully', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.success).to.be.true;",
                  "    pm.expect(responseJson.message).to.include('updated');",
                  "});",
                  "",
                  "console.log('✏️ Article Updated:', JSON.stringify(pm.response.json(), null, 2));"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{authToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Updated: The Ultimate Guide to Event Security in Nigeria\",\n  \"excerpt\": \"Updated comprehensive guide to ensuring the safety and security of your events in Nigeria with 2025 best practices.\",\n  \"featured\": true,\n  \"tags\": [\"security\", \"safety\", \"nigeria\", \"event planning\", \"crowd management\", \"2025\"]\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/articles/{{articleId}}",
              "host": ["{{baseUrl}}"],
              "path": ["articles", "{{articleId}}"]
            },
            "description": "Update an existing article. Only admins can update articles."
          }
        },
        {
          "name": "Like/Unlike Article",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Like status updated', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.success).to.be.true;",
                  "    pm.expect(responseJson.data).to.have.property('liked');",
                  "    pm.expect(responseJson.data).to.have.property('totalLikes');",
                  "});",
                  "",
                  "console.log('❤️ Article Like Response:', JSON.stringify(pm.response.json(), null, 2));"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{authToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/articles/{{articleId}}/like",
              "host": ["{{baseUrl}}"],
              "path": ["articles", "{{articleId}}", "like"]
            },
            "description": "Like or unlike an article. Toggles like status for the authenticated user."
          }
        },
        {
          "name": "Get Article Comments",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Comments array returned', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.success).to.be.true;",
                  "    pm.expect(responseJson.data).to.be.an('array');",
                  "});",
                  "",
                  "if (pm.response.json().data.length > 0) {",
                  "    pm.test('Comments have required fields', function () {",
                  "        const comment = pm.response.json().data[0];",
                  "        pm.expect(comment).to.have.property('content');",
                  "        pm.expect(comment).to.have.property('user');",
                  "        pm.expect(comment).to.have.property('createdAt');",
                  "        pm.expect(comment).to.have.property('replies');",
                  "    });",
                  "}",
                  "",
                  "console.log('💬 Article Comments:', JSON.stringify(pm.response.json(), null, 2));"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/articles/{{articleId}}/comments?page=1&limit=10",
              "host": ["{{baseUrl}}"],
              "path": ["articles", "{{articleId}}", "comments"],
              "query": [
                {
                  "key": "page",
                  "value": "1",
                  "description": "Page number"
                },
                {
                  "key": "limit",
                  "value": "10",
                  "description": "Comments per page"
                }
              ]
            },
            "description": "Get all comments for an article with pagination. Public endpoint - no authentication required."
          }
        },
        {
          "name": "Add Reply to Comment",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Reply added successfully', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.success).to.be.true;",
                  "    pm.expect(responseJson.data).to.have.property('reply');",
                  "});",
                  "",
                  "console.log('↩️ Reply Added:', JSON.stringify(pm.response.json(), null, 2));"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{authToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"content\": \"Thank you for your feedback! We're glad you found the guide helpful. If you have any specific questions about implementing these security measures at your events, feel free to ask.\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/articles/{{articleId}}/comments/{{commentId}}/reply",
              "host": ["{{baseUrl}}"],
              "path": [
                "articles",
                "{{articleId}}",
                "comments",
                "{{commentId}}",
                "reply"
              ]
            },
            "description": "Add a reply to a specific comment. Requires authentication. Use commentId from comment responses."
          }
        },
        {
          "name": "Add Comment to Article",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Comment added successfully', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.success).to.be.true;",
                  "    pm.expect(responseJson.data).to.have.property('comment');",
                  "    pm.expect(responseJson.data).to.have.property('totalComments');",
                  "    ",
                  "    // Set comment ID for reply testing",
                  "    pm.environment.set('commentId', responseJson.data.comment._id);",
                  "});",
                  "",
                  "console.log('💬 Comment Added:', JSON.stringify(pm.response.json(), null, 2));"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{authToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"content\": \"This is an excellent and comprehensive guide to event security in Nigeria. The practical tips and local context make it incredibly valuable for event organizers. Thank you for sharing this detailed information!\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/articles/{{articleId}}/comments",
              "host": ["{{baseUrl}}"],
              "path": ["articles", "{{articleId}}", "comments"]
            },
            "description": "Add a comment to an article. Requires authentication."
          }
        },
        {
          "name": "Delete Article (Admin Only)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Article deleted successfully', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.success).to.be.true;",
                  "    pm.expect(responseJson.message).to.include('deleted');",
                  "});",
                  "",
                  "console.log('🗑️ Article Deleted:', JSON.stringify(pm.response.json(), null, 2));"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{authToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/articles/{{articleId}}",
              "host": ["{{baseUrl}}"],
              "path": ["articles", "{{articleId}}"]
            },
            "description": "Delete an article permanently. Only admins can delete articles."
          }
        }
      ]
    },
    {
      "name": "👤 User Profile Management",
      "item": [
        {
          "name": "Get User Profile (User/Organizer)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    console.log('✅ Profile fetched successfully');",
                  "    console.log('\\n👤 Profile Information:');",
                  "    console.log('- Name:', response.data.name);",
                  "    console.log('- Email:', response.data.email);",
                  "    console.log('- Role:', response.data.role);",
                  "    console.log('- Profile Completeness:', response.data.profileCompleteness + '%');",
                  "    ",
                  "    if (response.data.statistics) {",
                  "        console.log('\\n📊 User Statistics:');",
                  "        Object.entries(response.data.statistics).forEach(([key, value]) => {",
                  "            console.log(`- ${key}:`, value);",
                  "        });",
                  "    }",
                  "    ",
                  "    if (response.data.financialSummary) {",
                  "        console.log('\\n💰 Financial Summary:');",
                  "        Object.entries(response.data.financialSummary).forEach(([key, value]) => {",
                  "            console.log(`- ${key}:`, value);",
                  "        });",
                  "    }",
                  "} else {",
                  "    console.log('❌ Failed to fetch profile');",
                  "    console.log('Response:', pm.response.text());",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{authToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/user-details/profile",
              "host": ["{{baseUrl}}"],
              "path": ["user-details", "profile"]
            },
            "description": "Get comprehensive profile information for the authenticated user (works for both regular users and organizers). Returns profile completeness, statistics, and financial summary."
          }
        },
        {
          "name": "Get Organizer Public Profile",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    console.log('✅ Organizer profile fetched successfully');",
                  "    console.log('\\n👨‍💼 Organizer Information:');",
                  "    console.log('- Name:', response.data.firstName + ' ' + response.data.lastName);",
                  "    console.log('- Verified:', response.data.verified);",
                  "    console.log('- Total Events:', response.data.statistics.totalEvents);",
                  "    console.log('- Approved Events:', response.data.statistics.approvedEvents);",
                  "    console.log('- Total Attendees:', response.data.statistics.totalAttendees);",
                  "    console.log('- Account Age:', response.data.statistics.accountAge);",
                  "    ",
                  "    console.log('\\n🎪 Event Categories:');",
                  "    response.data.categories.forEach(category => {",
                  "        console.log('- ' + category);",
                  "    });",
                  "    ",
                  "    console.log('\\n📅 Upcoming Events:', response.data.events.upcoming.length);",
                  "    console.log('📋 Past Events:', response.data.events.past.length);",
                  "} else {",
                  "    console.log('❌ Failed to fetch organizer profile');",
                  "    console.log('Response:', pm.response.text());",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{authToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/user-details/organizer/{{userId}}",
              "host": ["{{baseUrl}}"],
              "path": ["user-details", "organizer", "{{userId}}"]
            },
            "description": "Get public profile of any organizer with all their events. Accessible to all authenticated users. Returns comprehensive organizer information including statistics, events categorized by status, and public profile data."
          }
        }
      ]
    },
    {
      "name": "💬 Admin Messaging System",
      "item": [
        {
          "name": "Send Universal Message",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    console.log('✅ Universal message sent successfully');",
                  "    console.log('\\n📊 Delivery Statistics:');",
                  "    console.log('- Total Recipients:', response.data.totalRecipients);",
                  "    console.log('- Successful Sends:', response.data.successfulSends);",
                  "    console.log('- Failed Sends:', response.data.failedSends);",
                  "    console.log('- Success Rate:', ((response.data.successfulSends / response.data.totalRecipients) * 100).toFixed(2) + '%');",
                  "    ",
                  "    if (response.data.deliveryBreakdown) {",
                  "        console.log('\\n📋 Delivery Breakdown:');",
                  "        Object.entries(response.data.deliveryBreakdown).forEach(([role, count]) => {",
                  "            console.log(`- ${role}:`, count);",
                  "        });",
                  "    }",
                  "} else {",
                  "    console.log('❌ Failed to send universal message');",
                  "    console.log('Response:', pm.response.text());",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{authToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\\n  \\\"subject\\\": \\\"🎉 ShowPass Platform Update - New Features Available!\\\",\\n  \\\"message\\\": \\\"Dear ShowPass Community,\\n\\nWe're excited to announce several new features that will enhance your experience on our platform:\\n\\n🎪 Enhanced Event Discovery - Better search and filtering options\\n📊 Improved Analytics - More detailed insights for organizers\\n💳 Streamlined Payments - Faster and more secure transactions\\n📱 Mobile Optimization - Better mobile app experience\\n\\nThese updates are now live and ready for you to explore. Thank you for being part of the ShowPass community!\\n\\nBest regards,\\nThe ShowPass Team\\\"\\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/messaging/universal",
              "host": ["{{baseUrl}}"],
              "path": ["messaging", "universal"]
            },
            "description": "Send a message to all users (organizers and regular users) on the platform. Only admins can send universal messages."
          }
        },
        {
          "name": "Send Message to All Users",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    console.log('✅ Message sent to all users successfully');",
                  "    console.log('\\n📊 Delivery Statistics:');",
                  "    console.log('- Total Recipients:', response.data.totalRecipients);",
                  "    console.log('- Successful Sends:', response.data.successfulSends);",
                  "    console.log('- Failed Sends:', response.data.failedSends);",
                  "} else {",
                  "    console.log('❌ Failed to send message to users');",
                  "    console.log('Response:', pm.response.text());",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{authToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\\n  \\\"subject\\\": \\\"🎫 Discover Amazing Events This Weekend!\\\",\\n  \\\"message\\\": \\\"Hello there!\\n\\nThis weekend is packed with incredible events waiting for you to discover. From live concerts to tech meetups, cultural festivals to business conferences - there's something for everyone!\\n\\n🎵 Music & Entertainment\\n🎪 Cultural Events\\n💼 Professional Networking\\n🏃 Sports & Fitness\\n🎨 Arts & Creativity\\n\\nBrowse our latest events and find your next adventure. Don't miss out on the experiences that matter to you!\\n\\nHappy event hunting!\\nShowPass Team\\\"\\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/messaging/all-users",
              "host": ["{{baseUrl}}"],
              "path": ["messaging", "all-users"]
            },
            "description": "Send a message specifically to all regular users (excludes organizers). Only admins can send this type of message."
          }
        },
        {
          "name": "Send Message to All Organizers",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    console.log('✅ Message sent to all organizers successfully');",
                  "    console.log('\\n📊 Delivery Statistics:');",
                  "    console.log('- Total Recipients:', response.data.totalRecipients);",
                  "    console.log('- Successful Sends:', response.data.successfulSends);",
                  "    console.log('- Failed Sends:', response.data.failedSends);",
                  "} else {",
                  "    console.log('❌ Failed to send message to organizers');",
                  "    console.log('Response:', pm.response.text());",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{authToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\\n  \\\"subject\\\": \\\"📈 Boost Your Event Success - New Organizer Tools!\\\",\\n  \\\"message\\\": \\\"Dear Event Organizers,\\n\\nWe've been working hard to provide you with better tools to make your events more successful. Here's what's new for you:\\n\\n🎯 Enhanced Analytics Dashboard\\n- Real-time attendee tracking\\n- Revenue insights and projections\\n- Audience demographic analysis\\n\\n📧 Improved Communication Tools\\n- Automated attendee notifications\\n- Custom email templates\\n- Post-event follow-up automation\\n\\n💰 Streamlined Payment Processing\\n- Faster settlements\\n- Lower transaction fees\\n- Multiple payment options\\n\\n🎪 Event Promotion Features\\n- SEO-optimized event pages\\n- Social media integration\\n- Featured event opportunities\\n\\nThese tools are designed to help you create memorable experiences and grow your audience. Start exploring them today!\\n\\nBest of luck with your events,\\nShowPass Team\\\"\\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/messaging/all-organizers",
              "host": ["{{baseUrl}}"],
              "path": ["messaging", "all-organizers"]
            },
            "description": "Send a message specifically to all organizers (excludes regular users). Only admins can send this type of message."
          }
        },
        {
          "name": "Send Message to Specific Organizer",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    console.log('✅ Message sent to specific organizer successfully');",
                  "    console.log('\\n📧 Message Details:');",
                  "    console.log('- Recipient:', response.data.organizerName);",
                  "    console.log('- Email:', response.data.organizerEmail);",
                  "    console.log('- Subject:', response.data.subject);",
                  "    console.log('- Sent By:', response.data.sentBy);",
                  "    console.log('- Sent At:', response.data.sentAt);",
                  "} else {",
                  "    console.log('❌ Failed to send message to organizer');",
                  "    console.log('Response:', pm.response.text());",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{authToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\\n  \\\"organizerId\\\": \\\"{{userId}}\\\",\\n  \\\"subject\\\": \\\"🎯 Personal Event Strategy Consultation Available\\\",\\n  \\\"message\\\": \\\"Hello!\\n\\nI hope your events are going well. I've been reviewing your event performance and I'm impressed with the engagement you're generating.\\n\\nI'd like to offer you a personal consultation session where we can discuss:\\n\\n🎪 Event optimization strategies\\n📈 Growth opportunities for your audience\\n💡 Creative promotional ideas\\n🎯 Targeting and marketing best practices\\n\\nThis is a complimentary service we offer to our most active organizers. Would you be interested in scheduling a 30-minute call this week?\\n\\nLet me know your availability and I'll send over some meeting time options.\\n\\nBest regards,\\nShowPass Success Team\\\"\\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/messaging/organizer/{{userId}}",
              "host": ["{{baseUrl}}"],
              "path": ["messaging", "organizer", "{{userId}}"]
            },
            "description": "Send a personalized message to a specific organizer by their ID. Only admins can send individual messages."
          }
        },
        {
          "name": "Send Message to Specific User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    console.log('✅ Message sent to specific user successfully');",
                  "    console.log('\\n📧 Message Details:');",
                  "    console.log('- Recipient:', response.data.userName);",
                  "    console.log('- Email:', response.data.userEmail);",
                  "    console.log('- Subject:', response.data.subject);",
                  "    console.log('- Sent By:', response.data.sentBy);",
                  "    console.log('- Sent At:', response.data.sentAt);",
                  "} else {",
                  "    console.log('❌ Failed to send message to user');",
                  "    console.log('Response:', pm.response.text());",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{authToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\\n  \\\"userId\\\": \\\"{{userId}}\\\",\\n  \\\"subject\\\": \\\"🎁 Exclusive Event Recommendations Just for You!\\\",\\n  \\\"message\\\": \\\"Hi there!\\n\\nI noticed you've been actively attending events on ShowPass, and I wanted to personally reach out with some exclusive recommendations that I think you'll love.\\n\\nBased on your event history, here are some upcoming events that match your interests:\\n\\n🎵 Music & Live Performances\\n🎪 Cultural and Art Events\\n💼 Professional Development Workshops\\n🏃 Fitness and Wellness Activities\\n\\nAs one of our valued community members, you'll also get early access to:\\n\\n⚡ Flash ticket sales\\n🎯 VIP upgrade opportunities\\n🎁 Exclusive member-only events\\n💰 Special discount codes\\n\\nKeep exploring and discovering amazing experiences!\\n\\nBest wishes,\\nShowPass Community Team\\\"\\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/messaging/user/{{userId}}",
              "host": ["{{baseUrl}}"],
              "path": ["messaging", "user", "{{userId}}"]
            },
            "description": "Send a personalized message to a specific user by their ID. Only admins can send individual messages."
          }
        }
      ]
    },
    {
      "name": "Bookings & Ticket Management",
      "item": [
        {
          "name": "Create Booking (After Frontend Payment)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.environment.set('bookingId', response.data._id);",
                  "    pm.environment.set('paidBookingId', response.data._id);",
                  "    console.log('✅ Booking created successfully after frontend payment');",
                  "    console.log('📋 Booking Details:');",
                  "    console.log('- Booking ID:', response.data._id);",
                  "    console.log('- Event ID:', response.data.event);",
                  "    console.log('- Ticket Type:', response.data.ticketType);",
                  "    console.log('- Quantity:', response.data.quantity);",
                  "    console.log('- Total Amount: ₦' + response.data.totalAmount);",
                  "    console.log('- Platform Fee: ₦' + response.data.platformFee);",
                  "    console.log('- VAT: ₦' + response.data.vat);",
                  "    console.log('- Final Amount: ₦' + response.data.finalAmount);",
                  "    console.log('- Payment Status:', response.data.paymentStatus);",
                  "    console.log('- Booking Status:', response.data.status);",
                  "    console.log('- Frontend Payment ID:', response.data.frontendPaymentId);",
                  "    console.log('- QR Code Generated:', response.data.qrCode ? 'Yes' : 'No');",
                  "} else {",
                  "    console.log('❌ Failed to create booking');",
                  "    console.log('Response:', pm.response.text());",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{authToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"eventId\": \"{{paidEventId}}\",\n  \"ticketType\": \"Regular\",\n  \"quantity\": 2,\n  \"frontendPaymentId\": \"frontend_pay_{{$randomUUID}}\",\n  \"attendeeInfo\": {\n    \"name\": \"John Doe\",\n    \"email\": \"john.doe@example.com\",\n    \"phone\": \"+2348123456789\"\n  }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/booking",
              "host": ["{{baseUrl}}"],
              "path": ["booking"]
            },
            "description": "Create a booking after successful payment on frontend. Payment is processed on frontend and this endpoint saves the booking with confirmed status and generates tickets immediately."
          }
        },
        {
          "name": "Register for Free Event",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.environment.set('freeBookingId', response.data._id);",
                  "    console.log('✅ Free event registration successful');",
                  "    console.log('📋 Registration Details:');",
                  "    console.log('- Booking ID:', response.data._id);",
                  "    console.log('- Event ID:', response.data.event);",
                  "    console.log('- Ticket Type:', response.data.ticketType);",
                  "    console.log('- Quantity:', response.data.quantity);",
                  "    console.log('- Total Amount: ₦' + response.data.totalAmount);",
                  "    console.log('- Final Amount: ₦' + response.data.finalAmount);",
                  "    console.log('- Payment Status:', response.data.paymentStatus);",
                  "    console.log('- Booking Status:', response.data.status);",
                  "    console.log('- QR Code Generated:', !!response.data.qrCode);",
                  "} else {",
                  "    console.log('❌ Failed to register for free event');",
                  "    console.log('Response:', pm.response.text());",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{authToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"eventId\": \"{{freeEventId}}\",\n  \"ticketType\": \"Free\",\n  \"quantity\": 1,\n  \"attendeeInfo\": [\n    {\n      \"name\": \"Jane Smith\",\n      \"email\": \"jane.smith@example.com\",\n      \"phone\": \"+2348087654321\"\n    }\n  ]\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/bookings/free-event",
              "host": ["{{baseUrl}}"],
              "path": ["bookings", "free-event"]
            }
          }
        },
        {
          "name": "Create VIP Booking for Paid Event",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.environment.set('vipBookingId', response.data._id);",
                  "    console.log('✅ VIP booking created successfully');",
                  "    console.log('📋 VIP Booking Details:');",
                  "    console.log('- Booking ID:', response.data._id);",
                  "    console.log('- Ticket Type:', response.data.ticketType);",
                  "    console.log('- Quantity:', response.data.quantity);",
                  "    console.log('- Total Amount: ₦' + response.data.totalAmount);",
                  "    console.log('- Final Amount: ₦' + response.data.finalAmount);",
                  "    console.log('💰 VIP ticket price is significantly higher than regular tickets');",
                  "} else {",
                  "    console.log('❌ Failed to create VIP booking');",
                  "    console.log('Response:', pm.response.text());",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{authToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"eventId\": \"{{paidEventId}}\",\n  \"ticketType\": \"VIP\",\n  \"quantity\": 1,\n  \"attendeeInfo\": {\n    \"name\": \"Premium Customer\",\n    \"email\": \"premium@example.com\",\n    \"phone\": \"+2348111222333\"\n  }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/bookings",
              "host": ["{{baseUrl}}"],
              "path": ["bookings"]
            }
          }
        },
        {
          "name": "Get User Bookings & Tickets",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    console.log('✅ User bookings retrieved successfully');",
                  "    console.log('📊 Booking Summary:');",
                  "    console.log('- Total Bookings:', response.data.length);",
                  "    ",
                  "    let paidBookings = 0;",
                  "    let freeBookings = 0;",
                  "    let totalSpent = 0;",
                  "    ",
                  "    response.data.forEach((booking, index) => {",
                  "        console.log(`\\n🎫 Booking ${index + 1}:`);",
                  "        console.log('- Event:', booking.event.title);",
                  "        console.log('- Ticket Type:', booking.ticketType);",
                  "        console.log('- Quantity:', booking.quantity);",
                  "        console.log('- Amount: ₦' + booking.finalAmount);",
                  "        console.log('- Status:', booking.status);",
                  "        console.log('- Payment Status:', booking.paymentStatus);",
                  "        console.log('- Has QR Code:', !!booking.qrCode);",
                  "        ",
                  "        if (booking.finalAmount > 0) {",
                  "            paidBookings++;",
                  "            totalSpent += booking.finalAmount;",
                  "        } else {",
                  "            freeBookings++;",
                  "        }",
                  "    });",
                  "    ",
                  "    console.log(`\\n💰 Financial Summary:`);",
                  "    console.log('- Paid Bookings:', paidBookings);",
                  "    console.log('- Free Bookings:', freeBookings);",
                  "    console.log('- Total Spent: ₦' + totalSpent);",
                  "} else {",
                  "    console.log('❌ Failed to retrieve user bookings');",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{authToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}/bookings/my-tickets",
              "host": ["{{baseUrl}}"],
              "path": ["bookings", "my-tickets"]
            }
          }
        },
        {
          "name": "Get Booking Details by ID",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{authToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}/bookings/{{bookingId}}",
              "host": ["{{baseUrl}}"],
              "path": ["bookings", "{{bookingId}}"]
            }
          }
        },
        {
          "name": "Cancel Booking (Before Event)",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{authToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"reason\": \"Change of plans - unable to attend the event\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/bookings/{{bookingId}}/cancel",
              "host": ["{{baseUrl}}"],
              "path": ["bookings", "{{bookingId}}", "cancel"]
            }
          }
        }
      ]
    },
    {
      "name": "Payment Processing",
      "item": [
        {
          "name": "Payment Architecture Overview (Info)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "console.log('🏗️ Updated Payment Architecture');",
                  "console.log('');",
                  "console.log('🔄 Old vs New Approach:');",
                  "console.log('');",
                  "console.log('❌ Previous (Paystack Backend):');",
                  "console.log('1. Initialize payment on backend');",
                  "console.log('2. Redirect user to Paystack');",
                  "console.log('3. Handle webhook verification');",
                  "console.log('4. Confirm booking after verification');",
                  "console.log('5. Generate tickets');",
                  "console.log('');",
                  "console.log('✅ Current (Frontend Payment):');",
                  "console.log('1. Process payment entirely on frontend');",
                  "console.log('2. Receive payment confirmation/transaction ID');",
                  "console.log('3. Call booking endpoint with payment ID');",
                  "console.log('4. Generate tickets immediately');",
                  "console.log('');",
                  "console.log('🎯 Implementation Guide:');",
                  "console.log('1. Integrate payment processor on frontend (Stripe, PayPal, etc.)');",
                  "console.log('2. Calculate fees on frontend using our fee structure');",
                  "console.log('3. After successful payment, get transaction ID');",
                  "console.log('4. POST to /booking with frontendPaymentId');",
                  "console.log('5. Booking is confirmed immediately with QR code');",
                  "console.log('');",
                  "console.log('💡 Benefits:');",
                  "console.log('- Choose any payment processor');",
                  "console.log('- Faster user experience');",
                  "console.log('- Simplified backend logic');",
                  "console.log('- Better error handling');",
                  "console.log('- Immediate ticket delivery');"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/info/payment-architecture",
              "host": ["{{baseUrl}}"],
              "path": ["info", "payment-architecture"]
            },
            "description": "Overview of the updated payment architecture. Payment processing is now handled entirely on the frontend, providing more flexibility and better user experience."
          }
        },
        {
          "name": "Frontend Payment Guide (Info)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "console.log('💳 Frontend Payment Integration Overview');",
                  "console.log('');",
                  "console.log('📋 New Payment Flow:');",
                  "console.log('1. Frontend initiates payment with chosen payment processor');",
                  "console.log('2. User completes payment on frontend');",
                  "console.log('3. Frontend receives payment confirmation/transaction ID');",
                  "console.log('4. Frontend calls booking creation endpoint with payment ID');",
                  "console.log('5. Backend creates confirmed booking immediately');",
                  "console.log('6. QR code generated and email sent automatically');",
                  "console.log('');",
                  "console.log('✅ Benefits:');",
                  "console.log('- No backend payment processing complexity');",
                  "console.log('- Flexibility to use any payment processor');",
                  "console.log('- Faster booking confirmation');",
                  "console.log('- Immediate ticket generation');",
                  "console.log('- Simplified backend architecture');",
                  "console.log('');",
                  "console.log('🎯 Key Changes:');",
                  "console.log('- Removed Paystack backend integration');",
                  "console.log('- Payment processing moved to frontend');",
                  "console.log('- Direct booking creation after payment');",
                  "console.log('- Enhanced QR code email delivery');",
                  "console.log('- Streamlined booking workflow');"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/info/payment-integration",
              "host": ["{{baseUrl}}"],
              "path": ["info", "payment-integration"]
            },
            "description": "Informational endpoint explaining the updated payment integration approach. Payment processing is now handled entirely on the frontend, with the backend focusing on booking management and ticket generation."
          }
        },
        {
          "name": "Frontend Payment Confirmation (Info)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "console.log('ℹ️ Frontend Payment Integration Guide');",
                  "console.log('');",
                  "console.log('🔧 Setup Instructions:');",
                  "console.log('1. Process payment on your frontend application');",
                  "console.log('2. Obtain payment confirmation/transaction ID from payment processor');",
                  "console.log('3. Use the booking creation endpoint with frontendPaymentId');",
                  "console.log('4. Backend will create confirmed booking with QR code');",
                  "console.log('');",
                  "console.log('💡 Key Points:');",
                  "console.log('- No backend payment processing required');",
                  "console.log('- Frontend handles all payment gateway integration');",
                  "console.log('- Backend focuses on booking management and ticket generation');",
                  "console.log('- Immediate ticket confirmation after frontend payment');",
                  "console.log('');",
                  "console.log('🎫 Booking Flow:');",
                  "console.log('Frontend Payment → Backend Booking Creation → QR Code Generation → Email Confirmation');",
                  "console.log('');",
                  "console.log('📝 Required Fields for Booking:');",
                  "console.log('- eventId: Target event ID');",
                  "console.log('- ticketType: Selected ticket type');",
                  "console.log('- quantity: Number of tickets');",
                  "console.log('- frontendPaymentId: Payment processor transaction ID');",
                  "console.log('- attendeeInfo: Customer details');"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/info/frontend-payment-guide",
              "host": ["{{baseUrl}}"],
              "path": ["info", "frontend-payment-guide"]
            },
            "description": "This is an informational endpoint explaining the frontend payment integration approach. Payment processing is handled entirely on the frontend, and the backend creates bookings after payment confirmation."
          }
        }
      ]
    },
    {
      "name": "Refund Management",
      "item": [
        {
          "name": "Request Refund for Paid Event",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    console.log('✅ Refund request submitted successfully');",
                  "    console.log('\\n💰 Refund Request Details:');",
                  "    console.log('- Request ID:', response.data._id);",
                  "    console.log('- Booking ID:', response.data.booking);",
                  "    console.log('- Original Amount: ₦' + response.data.originalAmount);",
                  "    console.log('- Processing Fee: ₦' + response.data.processingFee);",
                  "    console.log('- Refund Amount: ₦' + response.data.refundAmount);",
                  "    console.log('- Status:', response.data.status);",
                  "    console.log('- Priority:', response.data.priority);",
                  "    console.log('- Reason:', response.data.reason);",
                  "    console.log('- Requested At:', new Date(response.data.createdAt).toLocaleString());",
                  "    ",
                  "    console.log('\\n⏱️ Processing Timeline:');",
                  "    if (response.data.priority === 'high') {",
                  "        console.log('- High Priority: 1-2 business days');",
                  "    } else if (response.data.priority === 'medium') {",
                  "        console.log('- Medium Priority: 3-5 business days');",
                  "    } else {",
                  "        console.log('- Normal Priority: 5-7 business days');",
                  "    }",
                  "    ",
                  "    console.log('\\n📧 Notifications:');",
                  "    console.log('- ✅ Refund request confirmation sent');",
                  "    console.log('- ✅ Admin notified for processing');",
                  "} else {",
                  "    console.log('❌ Refund request failed');",
                  "    console.log('Response:', pm.response.text());",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{authToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"bookingId\": \"{{paidBookingId}}\",\n  \"reason\": \"Unable to attend due to personal emergency. I have a medical situation that prevents me from traveling to the event location. Please process my refund at your earliest convenience.\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/refunds",
              "host": ["{{baseUrl}}"],
              "path": ["refunds"]
            }
          }
        },
        {
          "name": "Get User Refund Requests",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    console.log('✅ User refund requests retrieved successfully');",
                  "    console.log('\\n💰 Refund History Summary:');",
                  "    console.log('- Total Refund Requests:', response.data.length);",
                  "    ",
                  "    let pending = 0, approved = 0, rejected = 0, processed = 0;",
                  "    let totalRequested = 0, totalApproved = 0;",
                  "    ",
                  "    response.data.forEach((refund, index) => {",
                  "        console.log(`\\n💸 Refund ${index + 1}:`);",
                  "        console.log('- Request ID:', refund._id);",
                  "        console.log('- Event:', refund.booking?.event?.title || 'Event details not available');",
                  "        console.log('- Original Amount: ₦' + refund.originalAmount);",
                  "        console.log('- Processing Fee: ₦' + refund.processingFee);",
                  "        console.log('- Refund Amount: ₦' + refund.refundAmount);",
                  "        console.log('- Status:', refund.status);",
                  "        console.log('- Priority:', refund.priority);",
                  "        console.log('- Requested:', new Date(refund.createdAt).toLocaleDateString());",
                  "        ",
                  "        if (refund.processedAt) {",
                  "            console.log('- Processed:', new Date(refund.processedAt).toLocaleDateString());",
                  "        }",
                  "        ",
                  "        if (refund.adminComments) {",
                  "            console.log('- Admin Comments:', refund.adminComments);",
                  "        }",
                  "        ",
                  "        // Count statistics",
                  "        switch(refund.status) {",
                  "            case 'pending': pending++; break;",
                  "            case 'approved': approved++; break;",
                  "            case 'rejected': rejected++; break;",
                  "            case 'processed': processed++; break;",
                  "        }",
                  "        ",
                  "        totalRequested += refund.refundAmount;",
                  "        if (refund.status === 'approved' || refund.status === 'processed') {",
                  "            totalApproved += refund.refundAmount;",
                  "        }",
                  "    });",
                  "    ",
                  "    console.log('\\n📊 Refund Statistics:');",
                  "    console.log('- Pending:', pending);",
                  "    console.log('- Approved:', approved);",
                  "    console.log('- Processed:', processed);",
                  "    console.log('- Rejected:', rejected);",
                  "    console.log('- Total Requested: ₦' + totalRequested.toLocaleString());",
                  "    console.log('- Total Approved: ₦' + totalApproved.toLocaleString());",
                  "} else {",
                  "    console.log('❌ Failed to retrieve refund requests');",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{authToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}/refunds",
              "host": ["{{baseUrl}}"],
              "path": ["refunds"]
            }
          }
        },
        {
          "name": "Get All Refunds (Admin)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    console.log('✅ All refund requests retrieved successfully');",
                  "    console.log('\\n💰 Admin Refund Management Dashboard:');",
                  "    console.log('- Total Refund Requests:', response.data.length);",
                  "    console.log('- Page:', response.meta?.pagination?.page || 1);",
                  "    console.log('- Total in System:', response.meta?.pagination?.total || 0);",
                  "    ",
                  "    let pending = 0, approved = 0, rejected = 0, processed = 0;",
                  "    let highPriority = 0, mediumPriority = 0, lowPriority = 0;",
                  "    let totalRefundAmount = 0;",
                  "    ",
                  "    response.data.forEach((refund, index) => {",
                  "        console.log(`\\n💸 Refund Request ${index + 1}:`);",
                  "        console.log('- Request ID:', refund._id);",
                  "        console.log('- User:', refund.user?.firstName + ' ' + refund.user?.lastName);",
                  "        console.log('- User Email:', refund.user?.email);",
                  "        console.log('- Event:', refund.booking?.event?.title || 'N/A');",
                  "        console.log('- Booking ID:', refund.booking?._id);",
                  "        console.log('- Original Amount: ₦' + refund.originalAmount);",
                  "        console.log('- Refund Amount: ₦' + refund.refundAmount);",
                  "        console.log('- Status:', refund.status);",
                  "        console.log('- Priority:', refund.priority);",
                  "        console.log('- Reason:', refund.reason);",
                  "        console.log('- Requested:', new Date(refund.createdAt).toLocaleDateString());",
                  "        ",
                  "        if (refund.processedBy) {",
                  "            console.log('- Processed By:', refund.processedBy.firstName + ' ' + refund.processedBy.lastName);",
                  "        }",
                  "        ",
                  "        // Count statistics",
                  "        switch(refund.status) {",
                  "            case 'pending': pending++; break;",
                  "            case 'approved': approved++; break;",
                  "            case 'rejected': rejected++; break;",
                  "            case 'processed': processed++; break;",
                  "        }",
                  "        ",
                  "        switch(refund.priority) {",
                  "            case 'high': highPriority++; break;",
                  "            case 'medium': mediumPriority++; break;",
                  "            case 'low': lowPriority++; break;",
                  "        }",
                  "        ",
                  "        totalRefundAmount += refund.refundAmount;",
                  "    });",
                  "    ",
                  "    console.log('\\n📊 Admin Refund Statistics:');",
                  "    console.log('- Pending Review:', pending);",
                  "    console.log('- Approved:', approved);",
                  "    console.log('- Processed:', processed);",
                  "    console.log('- Rejected:', rejected);",
                  "    ",
                  "    console.log('\\n⚡ Priority Distribution:');",
                  "    console.log('- High Priority:', highPriority);",
                  "    console.log('- Medium Priority:', mediumPriority);",
                  "    console.log('- Low Priority:', lowPriority);",
                  "    ",
                  "    console.log('\\n💰 Financial Impact:');",
                  "    console.log('- Total Refund Amount: ₦' + totalRefundAmount.toLocaleString());",
                  "} else {",
                  "    console.log('❌ Failed to retrieve refund requests');",
                  "    console.log('Make sure you are logged in as an admin');",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{authToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}/admin/refunds?page=1&limit=20",
              "host": ["{{baseUrl}}"],
              "path": ["admin", "refunds"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "20"
                },
                {
                  "key": "status",
                  "value": "",
                  "description": "Filter by status: pending, approved, rejected, processed",
                  "disabled": true
                },
                {
                  "key": "priority",
                  "value": "",
                  "description": "Filter by priority: high, medium, low",
                  "disabled": true
                }
              ]
            }
          }
        },
        {
          "name": "Approve Refund (Admin)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    console.log('✅ Refund approved successfully');",
                  "    console.log('\\n💰 Refund Approval Details:');",
                  "    console.log('- Refund ID:', response.data._id || 'N/A');",
                  "    console.log('- User:', response.data.user?.firstName + ' ' + response.data.user?.lastName);",
                  "    console.log('- Refund Amount: ₦' + response.data.refundAmount);",
                  "    console.log('- New Status:', response.data.status);",
                  "    console.log('- Approved By:', 'Current Admin');",
                  "    console.log('- Approval Time:', new Date().toLocaleString());",
                  "    console.log('- Admin Comments:', response.data.adminComments || 'Refund approved');",
                  "    ",
                  "    console.log('\\n📋 Next Steps:');",
                  "    console.log('- ✅ User notified of approval');",
                  "    console.log('- ⏳ Refund will be processed within 3-5 business days');",
                  "    console.log('- 💳 Amount will be credited to original payment method');",
                  "    console.log('- 📧 User will receive confirmation once processed');",
                  "} else {",
                  "    console.log('❌ Refund approval failed');",
                  "    console.log('Response:', pm.response.text());",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{authToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"approved\": true,\n  \"comments\": \"Refund approved due to legitimate personal emergency. Medical documentation provided supports the request. Refund will be processed within 3-5 business days to the original payment method.\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/admin/refunds/REFUND_ID/process",
              "host": ["{{baseUrl}}"],
              "path": ["admin", "refunds", "REFUND_ID", "process"],
              "variable": [
                {
                  "key": "REFUND_ID",
                  "value": "{{refundId}}",
                  "description": "Replace with actual refund ID from previous requests"
                }
              ]
            }
          }
        },
        {
          "name": "Reject Refund (Admin)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    console.log('✅ Refund rejected successfully');",
                  "    console.log('\\n❌ Refund Rejection Details:');",
                  "    console.log('- Refund ID:', response.data._id || 'N/A');",
                  "    console.log('- User:', response.data.user?.firstName + ' ' + response.data.user?.lastName);",
                  "    console.log('- Requested Amount: ₦' + response.data.refundAmount);",
                  "    console.log('- New Status:', response.data.status);",
                  "    console.log('- Rejected By:', 'Current Admin');",
                  "    console.log('- Rejection Time:', new Date().toLocaleString());",
                  "    console.log('- Rejection Reason:', response.data.adminComments || 'See rejection details');",
                  "    ",
                  "    console.log('\\n📧 Notifications:');",
                  "    console.log('- ✅ User notified of rejection with detailed reason');",
                  "    console.log('- ✅ User can appeal decision if circumstances change');",
                  "} else {",
                  "    console.log('❌ Refund rejection failed');",
                  "    console.log('Response:', pm.response.text());",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{authToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"approved\": false,\n  \"comments\": \"Refund request does not meet our refund policy criteria. The event is less than 24 hours away and our terms clearly state that refunds are not available within this timeframe unless due to event cancellation by the organizer. Please review our refund policy for future reference.\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/admin/refunds/REFUND_ID/process",
              "host": ["{{baseUrl}}"],
              "path": ["admin", "refunds", "REFUND_ID", "process"],
              "variable": [
                {
                  "key": "REFUND_ID",
                  "value": "{{refundId}}",
                  "description": "Replace with actual refund ID from previous requests"
                }
              ]
            }
          }
        }
      ]
    },
    {
      "name": "Complete Workflow Examples",
      "item": [
        {
          "name": "🔄 Free Event Complete Workflow",
          "item": [
            {
              "name": "Step 1: Login as Organizer",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"louisdiaz43@gmail.com\",\n  \"password\": \"Balikiss12\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/auth/login",
                  "host": ["{{baseUrl}}"],
                  "path": ["auth", "login"]
                }
              }
            },
            {
              "name": "Step 2: Create Free Event",
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{authToken}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"title\": \"Free Community Workshop: Web Development Basics\",\n  \"description\": \"Join us for a hands-on workshop covering HTML, CSS, and JavaScript fundamentals. Perfect for beginners!\",\n  \"category\": \"Technology\",\n  \"venue\": {\n    \"name\": \"Tech Hub Lagos\",\n    \"address\": \"123 Tech Street, Victoria Island\",\n    \"city\": \"Lagos\",\n    \"state\": \"Lagos\"\n  },\n  \"startDate\": \"2025-03-10T14:00:00.000Z\",\n  \"endDate\": \"2025-03-10T17:00:00.000Z\",\n  \"startTime\": \"14:00\",\n  \"endTime\": \"17:00\",\n  \"ticketTypes\": [\n    {\n      \"name\": \"Free\",\n      \"price\": 0,\n      \"quantity\": 50,\n      \"description\": \"Free workshop attendance\",\n      \"isFree\": true\n    }\n  ],\n  \"maxAttendees\": 50,\n  \"tags\": [\"free\", \"workshop\", \"web development\", \"beginners\"]\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/events",
                  "host": ["{{baseUrl}}"],
                  "path": ["events"]
                }
              }
            },
            {
              "name": "Step 3: Login as Admin to Approve",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"mustapha.muhammed@bowen.edu.ng\",\n  \"password\": \"Balikiss12\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/auth/login",
                  "host": ["{{baseUrl}}"],
                  "path": ["auth", "login"]
                }
              }
            },
            {
              "name": "Step 4: Approve Free Event",
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{authToken}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "PUT",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"approved\": true,\n  \"comments\": \"Great free community event! Approved for publication.\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/admin/events/{{freeEventId}}/review",
                  "host": ["{{baseUrl}}"],
                  "path": ["admin", "events", "{{freeEventId}}", "review"]
                }
              }
            },
            {
              "name": "Step 5: Login as User to Register",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"muhammedabiodun42@gmail.com\",\n  \"password\": \"Balikiss12\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/auth/login",
                  "host": ["{{baseUrl}}"],
                  "path": ["auth", "login"]
                }
              }
            },
            {
              "name": "Step 6: Register for Free Event",
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{authToken}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"eventId\": \"{{freeEventId}}\",\n  \"ticketType\": \"Free\",\n  \"quantity\": 1\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/bookings/free-event",
                  "host": ["{{baseUrl}}"],
                  "path": ["bookings", "free-event"]
                }
              }
            }
          ]
        },
        {
          "name": "💰 Paid Event Complete Workflow",
          "item": [
            {
              "name": "Step 1: Login as Organizer",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"louisdiaz43@gmail.com\",\n  \"password\": \"Balikiss12\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/auth/login",
                  "host": ["{{baseUrl}}"],
                  "path": ["auth", "login"]
                }
              }
            },
            {
              "name": "Step 2: Create Paid Event",
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{authToken}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"title\": \"Professional Business Conference 2025\",\n  \"description\": \"Premium business conference featuring industry leaders, networking opportunities, and professional development sessions.\",\n  \"category\": \"Business\",\n  \"venue\": {\n    \"name\": \"Lagos Business Center\",\n    \"address\": \"456 Business Avenue, Victoria Island\",\n    \"city\": \"Lagos\",\n    \"state\": \"Lagos\"\n  },\n  \"startDate\": \"2025-04-15T09:00:00.000Z\",\n  \"endDate\": \"2025-04-15T17:00:00.000Z\",\n  \"startTime\": \"09:00\",\n  \"endTime\": \"17:00\",\n  \"ticketTypes\": [\n    {\n      \"name\": \"Regular\",\n      \"price\": 50000,\n      \"quantity\": 100,\n      \"description\": \"Standard conference access\",\n      \"isFree\": false\n    },\n    {\n      \"name\": \"VIP\",\n      \"price\": 100000,\n      \"quantity\": 20,\n      \"description\": \"VIP access with networking dinner\",\n      \"isFree\": false\n    }\n  ],\n  \"maxAttendees\": 120,\n  \"tags\": [\"business\", \"networking\", \"professional\"]\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/events",
                  "host": ["{{baseUrl}}"],
                  "path": ["events"]
                }
              }
            },
            {
              "name": "Step 3: Login as Admin",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"mustapha.muhammed@bowen.edu.ng\",\n  \"password\": \"Balikiss12\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/auth/login",
                  "host": ["{{baseUrl}}"],
                  "path": ["auth", "login"]
                }
              }
            },
            {
              "name": "Step 4: Approve Paid Event",
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{authToken}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "PUT",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"approved\": true,\n  \"comments\": \"Excellent business conference with great speaker lineup. Approved!\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/admin/events/{{paidEventId}}/review",
                  "host": ["{{baseUrl}}"],
                  "path": ["admin", "events", "{{paidEventId}}", "review"]
                }
              }
            },
            {
              "name": "Step 5: Login as User",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"muhammedabiodun42@gmail.com\",\n  \"password\": \"Balikiss12\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/auth/login",
                  "host": ["{{baseUrl}}"],
                  "path": ["auth", "login"]
                }
              }
            },
            {
              "name": "Step 6: Create Booking for Paid Event",
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{authToken}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"eventId\": \"{{paidEventId}}\",\n  \"ticketType\": \"Regular\",\n  \"quantity\": 1,\n  \"attendeeInfo\": {\n    \"name\": \"John Business\",\n    \"email\": \"john.business@example.com\",\n    \"phone\": \"+2348123456789\"\n  }\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/bookings",
                  "host": ["{{baseUrl}}"],
                  "path": ["bookings"]
                }
              }
            },
            {
              "name": "Step 7: Simulate Frontend Payment (Info)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "// Simulate frontend payment completion",
                      "const frontendPaymentId = 'frontend_pay_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);",
                      "pm.environment.set('frontendPaymentId', frontendPaymentId);",
                      "console.log('💳 Frontend Payment Simulation');",
                      "console.log('');",
                      "console.log('✅ Payment processed successfully on frontend');",
                      "console.log('- Payment Processor: Stripe/PayPal/Flutterwave (your choice)');",
                      "console.log('- Transaction ID:', frontendPaymentId);",
                      "console.log('- Amount: ₦35,000 (example)');",
                      "console.log('- Status: Success');",
                      "console.log('- Payment Method: Card');",
                      "console.log('');",
                      "console.log('🎯 Next Step:');",
                      "console.log('Use this transaction ID to create booking on backend');",
                      "console.log('Environment variable frontendPaymentId has been set for next request');",
                      "console.log('');",
                      "console.log('📝 In real implementation:');",
                      "console.log('1. User selects payment method on frontend');",
                      "console.log('2. Frontend processes payment with chosen processor');",
                      "console.log('3. Frontend receives transaction confirmation');",
                      "console.log('4. Frontend calls backend booking endpoint');",
                      "console.log('5. Backend creates confirmed booking immediately');"
                    ]
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/info/simulate-frontend-payment",
                  "host": ["{{baseUrl}}"],
                  "path": ["info", "simulate-frontend-payment"]
                },
                "description": "This simulates a successful frontend payment process. In real implementation, this would be handled by your frontend payment integration."
              }
            },
            {
              "name": "Step 8: Create Booking After Frontend Payment",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "if (pm.response.code === 200 || pm.response.code === 201) {",
                      "    const response = pm.response.json();",
                      "    console.log('✅ Booking created successfully after frontend payment');",
                      "    console.log('🎫 Booking Details:');",
                      "    console.log('- Booking ID:', response.data._id);",
                      "    console.log('- Event ID:', response.data.event);",
                      "    console.log('- Status:', response.data.status);",
                      "    console.log('- Payment Status:', response.data.paymentStatus);",
                      "    console.log('- Frontend Payment ID:', response.data.frontendPaymentId);",
                      "    console.log('- QR Code Generated:', !!response.data.qrCode);",
                      "    console.log('- Final Amount: ₦' + response.data.finalAmount);",
                      "    console.log('');",
                      "    console.log('🎯 Workflow Complete!');",
                      "    console.log('- ✅ Event created and approved');",
                      "    console.log('- ✅ Payment processed on frontend');",
                      "    console.log('- ✅ Booking confirmed immediately');",
                      "    console.log('- ✅ QR code generated for entry');",
                      "    console.log('- ✅ Email confirmation sent');",
                      "} else {",
                      "    console.log('❌ Failed to create booking');",
                      "    console.log('Response:', pm.response.text());",
                      "}"
                    ]
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{authToken}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"eventId\": \"{{paidEventId}}\",\n  \"ticketType\": \"Regular\",\n  \"quantity\": 1,\n  \"frontendPaymentId\": \"{{frontendPaymentId}}\",\n  \"attendeeInfo\": {\n    \"name\": \"John Doe\",\n    \"email\": \"john.doe@example.com\",\n    \"phone\": \"+2348123456789\"\n  }\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/booking",
                  "host": ["{{baseUrl}}"],
                  "path": ["booking"]
                },
                "description": "Create booking after successful frontend payment processing. This replaces the previous Paystack verification step."
              }
            }
          ]
        }
      ]
    }
  ]
}
